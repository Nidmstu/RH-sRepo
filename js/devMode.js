/**
 * –ú–æ–¥—É–ª—å —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–∞—Ö –∏ –æ—Ç–≤–µ—Ç–∞—Ö –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
 */

class DevMode {
  constructor() {
    this.enabled = true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω
    this.logs = [];
    this.maxLogs = 100;
    this.requestCounter = 0;
    this.networkRequests = {};
    this.localStorageData = {};
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
   */
  initialize() {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞...');
    this.addStyles();
    this.addDevModePanel();
    this.addDevModeToggle();
    this.overrideFetch();
    this.overrideXMLHttpRequest();
    this.refreshLocalStorageViewer();
    console.log('üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
   */
  addStyles() {
    const styleElement = document.createElement('style');
    styleElement.textContent = `
      /* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ */
      .dev-mode-toggle {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background-color: #333;
        color: #fff;
        border: none;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        display: flex;
        justify-content: center;
        align-items: center;
        cursor: pointer;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
        z-index: 9999;
        font-size: 20px;
        transition: all 0.3s ease;
      }

      .dev-mode-toggle span {
        display: none;
      }

      .dev-mode-toggle:hover {
        width: auto;
        border-radius: 25px;
        padding: 0 20px;
      }

      .dev-mode-toggle:hover span {
        display: inline;
        margin-left: 10px;
        font-size: 14px;
      }

      .dev-mode-toggle.enabled {
        background-color: #2ecc71;
      }

      /* –ü–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ */
      .dev-panel {
        position: fixed;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 300px;
        background-color: #282c34;
        color: #abb2bf;
        z-index: 9998;
        display: none;
        flex-direction: column;
        font-family: 'Consolas', 'Monaco', monospace;
        font-size: 13px;
        box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.2);
        overflow: hidden;
      }

      .dev-panel-header {
        background-color: #21252b;
        padding: 8px 15px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid #181a1f;
      }

      .dev-panel-tabs {
        display: flex;
      }

      .dev-panel-tab {
        padding: 5px 15px;
        cursor: pointer;
        background-color: transparent;
        border: none;
        color: #abb2bf;
        border-bottom: 2px solid transparent;
      }

      .dev-panel-tab.active {
        border-bottom-color: #61afef;
        color: #fff;
      }

      .dev-panel-content {
        flex: 1;
        overflow: auto;
        padding: 10px;
      }

      .dev-panel-actions {
        display: flex;
        gap: 10px;
      }

      .dev-panel-btn {
        background-color: #3d424d;
        border: none;
        color: #fff;
        padding: 5px 10px;
        border-radius: 3px;
        cursor: pointer;
        font-size: 12px;
      }

      .dev-panel-btn:hover {
        background-color: #4b5363;
      }

      .dev-panel-content-pane {
        display: none;
        height: 100%;
        overflow: auto;
      }

      .dev-panel-content-pane.active {
        display: block;
      }

      /* –°—Ç–∏–ª–∏ –¥–ª—è –ª–æ–≥–æ–≤ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ */
      .network-log-item {
        border-bottom: 1px solid #3d424d;
        padding: 8px 0;
        display: flex;
        justify-content: space-between;
      }

      .network-log-status {
        display: inline-block;
        width: 8px;
        height: 8px;
        border-radius: 50%;
        margin-right: 8px;
      }

      .network-log-status.success {
        background-color: #98c379;
      }

      .network-log-status.error {
        background-color: #e06c75;
      }

      .network-log-status.pending {
        background-color: #e5c07b;
      }

      .network-log-method {
        display: inline-block;
        width: 60px;
        color: #c678dd;
        font-weight: bold;
      }

      .network-log-url {
        flex: 1;
        margin: 0 10px;
        word-break: break-all;
        color: #61afef;
      }

      .network-log-time {
        color: #e5c07b;
      }

      .network-log-details {
        margin-top: 5px;
        padding: 10px;
        background-color: #2c313a;
        border-radius: 3px;
        display: none;
      }

      .network-log-details.visible {
        display: block;
      }

      .network-log-details h4 {
        margin: 0 0 10px 0;
        color: #abb2bf;
        font-size: 14px;
      }

      .network-log-details pre {
        margin: 0;
        white-space: pre-wrap;
        word-wrap: break-word;
        max-height: 200px;
        overflow: auto;
        font-size: 12px;
        color: #e5c07b;
      }

      /* –°—Ç–∏–ª–∏ –¥–ª—è localStorage viewer */
      .localstorage-viewer {
        display: flex;
        flex-direction: column;
        height: 100%;
      }

      .localstorage-controls {
        margin-bottom: 10px;
        display: flex;
        gap: 10px;
      }

      .localstorage-items {
        display: flex;
        gap: 10px;
        flex: 1;
        overflow: hidden;
      }

      .localstorage-keys {
        width: 250px;
        overflow-y: auto;
        border: 1px solid #3d424d;
        border-radius: 3px;
      }

      .localstorage-key {
        padding: 8px 10px;
        cursor: pointer;
        border-bottom: 1px solid #3d424d;
        word-break: break-all;
        transition: background-color 0.2s;
      }

      .localstorage-key:hover {
        background-color: #2c313a;
      }

      .localstorage-key.active {
        background-color: #3d424d;
        color: #fff;
      }

      .localstorage-value {
        flex: 1;
        overflow: auto;
        border: 1px solid #3d424d;
        border-radius: 3px;
        padding: 10px;
      }

      .localstorage-value-edit {
        width: 100%;
        height: 100%;
        background-color: #282c34;
        color: #abb2bf;
        border: none;
        font-family: monospace;
        resize: none;
        outline: none;
      }

      .localstorage-value pre {
        margin: 0;
        white-space: pre-wrap;
        word-wrap: break-word;
      }

      /* –°—Ç–∏–ª–∏ –¥–ª—è –∫—É—Ä—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ */
      .course-analysis {
        font-family: monospace;
        line-height: 1.5;
        padding: 10px;
      }

      .course-analysis h3 {
        margin-top: 15px;
        margin-bottom: 5px;
        color: #61afef;
      }

      .course-analysis pre {
        margin: 10px 0;
        padding: 10px;
        background-color: #2c313a;
        border-radius: 3px;
        overflow-x: auto;
        color: rgba(171, 178, 191, 0.8);
      }

      /* –°—Ç–∏–ª–∏ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–Ω–∞—á–∫–æ–≤ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ */
      .admin-form-group {
        position: relative;
      }

      .admin-webhook-info {
        position: relative;
        display: inline-block;
      }

      /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */
      @media (max-width: 768px) {
        .dev-panel {
          width: 100%;
          height: 200px;
        }
      }
    `;
    document.head.appendChild(styleElement);
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
   */
  addDevModeToggle() {
    const toggle = document.createElement('button');
    toggle.id = 'dev-mode-toggle';
    toggle.className = 'dev-mode-toggle' + (this.enabled ? ' enabled' : '');
    toggle.innerHTML = `
      <i class="fas fa-code"></i>
      <span>–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞</span>
    `;

    toggle.addEventListener('click', () => {
      this.toggleDevMode();
    });

    document.body.appendChild(toggle);
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
   */
  toggleDevMode() {
    this.enabled = !this.enabled;

    const toggle = document.getElementById('dev-mode-toggle');
    const devPanel = document.getElementById('dev-mode-panel');

    if (this.enabled) {
      toggle.classList.add('enabled');
      devPanel.style.display = 'flex';
      this.addInfoBadgesToAdminForms();
    } else {
      toggle.classList.remove('enabled');
      devPanel.style.display = 'none';
      this.removeInfoBadgesFromAdminForms();
    }

    console.log(`üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ ${this.enabled ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}`);
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
   */
  addDevModePanel() {
    const panel = document.createElement('div');
    panel.id = 'dev-mode-panel';
    panel.className = 'dev-panel';

    panel.innerHTML = `
      <div class="dev-panel-header">
        <div class="dev-panel-tabs">
          <button class="dev-panel-tab active" data-tab="network">–°–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã</button>
          <button class="dev-panel-tab" data-tab="localstorage">LocalStorage</button>
          <button class="dev-panel-tab" data-tab="analyze">–ê–Ω–∞–ª–∏–∑ –∫—É—Ä—Å–æ–≤</button>
        </div>
        <div class="dev-panel-actions">
          <button class="dev-panel-btn" id="dev-panel-clear">–û—á–∏—Å—Ç–∏—Ç—å</button>
          <button class="dev-panel-btn" id="dev-panel-close">–ó–∞–∫—Ä—ã—Ç—å</button>
        </div>
      </div>
      <div class="dev-panel-content">
        <div class="dev-panel-content-pane active" id="dev-panel-network">
          <div id="network-logs"></div>
        </div>
        <div class="dev-panel-content-pane" id="dev-panel-localstorage">
          <div class="localstorage-viewer">
            <div class="localstorage-controls">
              <button class="dev-panel-btn" id="refresh-localstorage">–û–±–Ω–æ–≤–∏—Ç—å</button>
              <button class="dev-panel-btn" id="add-localstorage-item">–î–æ–±–∞–≤–∏—Ç—å</button>
              <button class="dev-panel-btn" id="edit-localstorage-item">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
              <button class="dev-panel-btn" id="delete-localstorage-item">–£–¥–∞–ª–∏—Ç—å</button>
              <button class="dev-panel-btn" id="clear-localstorage">–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë</button>
            </div>
            <div class="localstorage-items">
              <div class="localstorage-keys" id="localstorage-keys"></div>
              <div class="localstorage-value" id="localstorage-value">
                <pre id="localstorage-value-display"></pre>
              </div>
            </div>
          </div>
        </div>
        <div class="dev-panel-content-pane" id="dev-panel-analyze">
          <div class="course-analysis" id="course-analysis"></div>
        </div>
      </div>
    `;

    document.body.appendChild(panel);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–∫–ª–∞–¥–æ–∫
    const tabs = panel.querySelectorAll('.dev-panel-tab');
    tabs.forEach(tab => {
      tab.addEventListener('click', () => {
        tabs.forEach(t => t.classList.remove('active'));
        tab.classList.add('active');

        const tabId = tab.getAttribute('data-tab');
        const panes = panel.querySelectorAll('.dev-panel-content-pane');
        panes.forEach(pane => pane.classList.remove('active'));
        document.getElementById(`dev-panel-${tabId}`).classList.add('active');

        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –∫—É—Ä—Å–æ–≤
        if (tabId === 'analyze') {
          this.analyzeCoursesData();
        } else if (tabId === 'localstorage') {
          this.refreshLocalStorageViewer();
        }
      });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏
    document.getElementById('dev-panel-clear').addEventListener('click', () => {
      const activeTab = panel.querySelector('.dev-panel-tab.active').getAttribute('data-tab');

      if (activeTab === 'network') {
        document.getElementById('network-logs').innerHTML = '';
        this.networkRequests = {};
      } else if (activeTab === 'analyze') {
        document.getElementById('course-analysis').innerHTML = '';
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
    document.getElementById('dev-panel-close').addEventListener('click', () => {
      panel.style.display = 'none';
      document.getElementById('dev-mode-toggle').classList.remove('enabled');
      this.enabled = false;
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è LocalStorage
    document.getElementById('refresh-localstorage').addEventListener('click', () => {
      this.refreshLocalStorageViewer();
    });

    document.getElementById('add-localstorage-item').addEventListener('click', () => {
      this.addLocalStorageItem();
    });

    document.getElementById('edit-localstorage-item').addEventListener('click', () => {
      this.editLocalStorageItem();
    });

    document.getElementById('delete-localstorage-item').addEventListener('click', () => {
      this.deleteLocalStorageItem();
    });

    document.getElementById('clear-localstorage').addEventListener('click', () => {
      if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ LocalStorage?')) {
        localStorage.clear();
        this.refreshLocalStorageViewer();
      }
    });
  }

  /**
   * –ü–µ—Ä–µ—Ö–≤–∞—Ç –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ fetch
   */
  overrideFetch() {
    const originalFetch = window.fetch;
    const self = this;

    window.fetch = function(resource, init) {
      const startTime = performance.now();
      const requestId = ++self.requestCounter;

      let method = 'GET';
      let requestBody = null;

      if (init) {
        method = init.method || 'GET';
        requestBody = init.body || null;
      }

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
      const requestInfo = {
        id: requestId,
        url: resource instanceof Request ? resource.url : resource,
        method: method,
        headers: init?.headers ? (init.headers instanceof Headers ? Object.fromEntries(init.headers.entries()) : init.headers) : {},
        body: requestBody,
        timestamp: new Date(),
        startTime: startTime
      };

      // –ï—Å–ª–∏ —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω, –ª–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
      if (self.enabled) {
        self.logRequest(requestInfo);
      }

      // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π fetch
      return originalFetch.apply(this, arguments)
        .then(response => {
          const endTime = performance.now();
          const duration = endTime - startTime;

          // –ö–ª–æ–Ω–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–ª–æ
          const clonedResponse = response.clone();

          clonedResponse.text().then(responseText => {
            const responseInfo = {
              status: response.status,
              statusText: response.statusText,
              headers: Object.fromEntries(response.headers.entries()),
              body: responseText,
              duration: duration.toFixed(2)
            };

            // –ï—Å–ª–∏ —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω, –ª–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            if (self.enabled) {
              self.logResponse(requestId, responseInfo);
            }
          }).catch(err => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞:', err);
          });

          return response;
        })
        .catch(error => {
          const endTime = performance.now();
          const duration = endTime - startTime;

          // –ï—Å–ª–∏ —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
          if (self.enabled) {
            self.logError(requestId, error, duration.toFixed(2));
          }

          throw error;
        });
    };
  }

  /**
   * –ü–µ—Ä–µ—Ö–≤–∞—Ç XMLHttpRequest
   */
  overrideXMLHttpRequest() {
    const self = this;
    const originalOpen = XMLHttpRequest.prototype.open;
    const originalSend = XMLHttpRequest.prototype.send;

    XMLHttpRequest.prototype.open = function(method, url, async, user, password) {
      this._devModeInfo = {
        id: ++self.requestCounter,
        method: method,
        url: url,
        timestamp: new Date(),
        startTime: performance.now()
      };

      return originalOpen.apply(this, arguments);
    };

    XMLHttpRequest.prototype.send = function(body) {
      if (this._devModeInfo) {
        this._devModeInfo.body = body;

        // –ï—Å–ª–∏ —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω, –ª–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        if (self.enabled) {
          self.logRequest(this._devModeInfo);
        }

        this.addEventListener('load', function() {
          const endTime = performance.now();
          const duration = endTime - this._devModeInfo.startTime;

          const responseInfo = {
            status: this.status,
            statusText: this.statusText,
            headers: this.getAllResponseHeaders().split('\r\n').reduce((result, header) => {
              const parts = header.split(': ');
              if (parts[0] && parts[1]) {
                result[parts[0]] = parts[1];
              }
              return result;
            }, {}),
            body: this.responseText,
            duration: duration.toFixed(2)
          };

          // –ï—Å–ª–∏ —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω, –ª–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
          if (self.enabled) {
            self.logResponse(this._devModeInfo.id, responseInfo);
          }
        });

        this.addEventListener('error', function(event) {
          const endTime = performance.now();
          const duration = endTime - this._devModeInfo.startTime;

          // –ï—Å–ª–∏ —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
          if (self.enabled) {
            self.logError(this._devModeInfo.id, new Error('Network error'), duration.toFixed(2));
          }
        });

        this.addEventListener('timeout', function() {
          const endTime = performance.now();
          const duration = endTime - this._devModeInfo.startTime;

          // –ï—Å–ª–∏ —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ç–∞–π–º–∞—É—Ç–∞
          if (self.enabled) {
            self.logError(this._devModeInfo.id, new Error('Request timeout'), duration.toFixed(2));
          }
        });
      }

      return originalSend.apply(this, arguments);
    };
  }

  /**
   * –ó–∞–ø–∏—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—Ä–æ—Å–µ
   */
  logRequest(requestInfo) {
    this.networkRequests[requestInfo.id] = {
      request: requestInfo,
      status: 'pending'
    };

    this.updateNetworkLogs();
  }

  /**
   * –ó–∞–ø–∏—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–≤–µ—Ç–µ
   */
  logResponse(requestId, responseInfo) {
    if (!this.networkRequests[requestId]) return;

    this.networkRequests[requestId].response = responseInfo;
    this.networkRequests[requestId].status = 'success';

    this.updateNetworkLogs();
  }

  /**
   * –ó–∞–ø–∏—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ
   */
  logError(requestId, error, duration) {
    if (!this.networkRequests[requestId]) return;

    this.networkRequests[requestId].error = {
      message: error.message,
      stack: error.stack,
      duration: duration
    };
    this.networkRequests[requestId].status = 'error';

    this.updateNetworkLogs();
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ø–∞–Ω–µ–ª–∏
   */
  updateNetworkLogs() {
    const logsContainer = document.getElementById('network-logs');
    if (!logsContainer) return;

    logsContainer.innerHTML = '';

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    const requests = Object.values(this.networkRequests).sort((a, b) => {
      return b.request.timestamp - a.request.timestamp;
    });

    requests.forEach(item => {
      const logItem = document.createElement('div');
      logItem.className = 'network-log-item';
      logItem.setAttribute('data-id', item.request.id);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞
      let statusClass = 'pending';
      if (item.status === 'success') statusClass = 'success';
      if (item.status === 'error') statusClass = 'error';

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º URL –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      let url = item.request.url;
      if (url.length > 60) {
        url = url.substring(0, 60) + '...';
      }

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
      const time = item.request.timestamp.toLocaleTimeString();

      // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
      logItem.innerHTML = `
        <div class="network-log-info">
          <span class="network-log-status ${statusClass}"></span>
          <span class="network-log-method">${item.request.method}</span>
          <span class="network-log-url">${url}</span>
          <span class="network-log-time">${time}</span>
        </div>
      `;

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ
      const detailsDiv = document.createElement('div');
      detailsDiv.className = 'network-log-details';

      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ
      let requestDetails = `
        <h4>–ó–∞–ø—Ä–æ—Å</h4>
        <p>URL: ${item.request.url}</p>
        <p>–ú–µ—Ç–æ–¥: ${item.request.method}</p>
      `;

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      if (item.request.headers && Object.keys(item.request.headers).length > 0) {
        requestDetails += `<p>–ó–∞–≥–æ–ª–æ–≤–∫–∏:</p><pre>${JSON.stringify(item.request.headers, null, 2)}</pre>`;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
      if (item.request.body) {
        let bodyContent = item.request.body;

        // –ï—Å–ª–∏ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ —è–≤–ª—è–µ—Ç—Å—è FormData, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ –æ–±—ä–µ–∫—Ç
        if (bodyContent instanceof FormData) {
          const formDataObj = {};
          for (let [key, value] of bodyContent.entries()) {
            formDataObj[key] = value;
          }
          bodyContent = JSON.stringify(formDataObj, null, 2);
        } else if (typeof bodyContent === 'string') {
          // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
          try {
            const jsonBody = JSON.parse(bodyContent);
            bodyContent = JSON.stringify(jsonBody, null, 2);
          } catch (e) {
            // –ù–µ JSON, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
          }
        }

        requestDetails += `<p>–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:</p><pre>${bodyContent}</pre>`;
      }

      detailsDiv.innerHTML = requestDetails;

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–≤–µ—Ç–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      if (item.response) {
        let responseDetails = `
          <h4>–û—Ç–≤–µ—Ç</h4>
          <p>–°—Ç–∞—Ç—É—Å: ${item.response.status} ${item.response.statusText}</p>
          <p>–í—Ä–µ–º—è: ${item.response.duration} –º—Å</p>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
        if (item.response.headers && Object.keys(item.response.headers).length > 0) {
          responseDetails += `<p>–ó–∞–≥–æ–ª–æ–≤–∫–∏:</p><pre>${JSON.stringify(item.response.headers, null, 2)}</pre>`;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
        if (item.response.body) {
          let bodyContent = item.response.body;

          // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
          try {
            const jsonBody = JSON.parse(bodyContent);
            bodyContent = JSON.stringify(jsonBody, null, 2);
          } catch (e) {
            // –ù–µ JSON, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ HTML –ª–∏ —ç—Ç–æ
            if (bodyContent.trim().startsWith('<!DOCTYPE') || bodyContent.trim().startsWith('<html')) {
              bodyContent = 'HTML-–∫–æ–Ω—Ç–µ–Ω—Ç (—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)';
              if (bodyContent.length < 1000) {
                bodyContent = bodyContent.replace(/</g, '&lt;').replace(/>/g, '&gt;');
              }
            }
          }

          responseDetails += `<p>–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:</p><pre>${bodyContent}</pre>`;
        }

        detailsDiv.innerHTML += responseDetails;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
      if (item.error) {
        detailsDiv.innerHTML += `
          <h4>–û—à–∏–±–∫–∞</h4>
          <p>${item.error.message}</p>
          <p>–í—Ä–µ–º—è: ${item.error.duration} –º—Å</p>
          ${item.error.stack ? `<pre>${item.error.stack}</pre>` : ''}
        `;
      }

      logItem.appendChild(detailsDiv);

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –¥–µ—Ç–∞–ª–µ–π
      logItem.addEventListener('click', function() {
        const details = this.querySelector('.network-log-details');
        details.classList.toggle('visible');
      });

      logsContainer.appendChild(logItem);
    });
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–∞ localStorage
   */
  refreshLocalStorageViewer() {
    const keysContainer = document.getElementById('localstorage-keys');
    const valueDisplay = document.getElementById('localstorage-value-display');

    if (!keysContainer || !valueDisplay) return;

    keysContainer.innerHTML = '';
    valueDisplay.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–≤–∞';

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ localStorage
    this.localStorageData = {};
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      const value = localStorage.getItem(key);
      this.localStorageData[key] = value;

      const keyElement = document.createElement('div');
      keyElement.className = 'localstorage-key';
      keyElement.textContent = key;
      keyElement.dataset.key = key;

      keyElement.addEventListener('click', () => {
        const allKeys = document.querySelectorAll('.localstorage-key');
        allKeys.forEach(k => k.classList.remove('active'));
        keyElement.classList.add('active');

        // –ü—ã—Ç–∞–µ–º—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å JSON
        try {
          const parsedValue = JSON.parse(value);
          valueDisplay.textContent = JSON.stringify(parsedValue, null, 2);
        } catch (e) {
          valueDisplay.textContent = value;
        }
      });

      keysContainer.appendChild(keyElement);
    }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ localStorage
   */
  addLocalStorageItem() {
    const key = prompt('–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á:');
    if (!key) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–ª—é—á
    if (localStorage.getItem(key) !== null) {
      alert(`–ö–ª—é—á '${key}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.`);
      return;
    }

    const value = prompt('–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ:');
    if (value === null) return; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤–≤–æ–¥

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem(key, value);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫
    this.refreshLocalStorageViewer();

    // –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    setTimeout(() => {
      const newKeyElement = document.querySelector(`.localstorage-key[data-key="${key}"]`);
      if (newKeyElement) {
        newKeyElement.click();
      }
    }, 100);
  }

  /**
   * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ localStorage
   */
  editLocalStorageItem() {
    const activeKey = document.querySelector('.localstorage-key.active');
    if (!activeKey) {
      alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }

    const key = activeKey.dataset.key;
    const currentValue = localStorage.getItem(key);

    // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const valueDisplay = document.getElementById('localstorage-value-display');
    const valueContainer = document.getElementById('localstorage-value');

    // –°–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    valueDisplay.style.display = 'none';

    // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const textarea = document.createElement('textarea');
    textarea.className = 'localstorage-value-edit';
    textarea.value = valueDisplay.textContent;
    valueContainer.appendChild(textarea);

    // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –æ–±–ª–∞—Å—Ç–∏
    textarea.focus();

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const buttonsContainer = document.createElement('div');
    buttonsContainer.style.marginTop = '10px';
    buttonsContainer.innerHTML = `
      <button class="dev-panel-btn" id="save-localstorage-edit">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
      <button class="dev-panel-btn" id="cancel-localstorage-edit">–û—Ç–º–µ–Ω–∞</button>
    `;
    valueContainer.appendChild(buttonsContainer);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    document.getElementById('save-localstorage-edit').addEventListener('click', () => {
      const newValue = textarea.value;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON, –µ—Å–ª–∏ –ø–æ—Ö–æ–∂–µ –Ω–∞ –æ–±—ä–µ–∫—Ç –∏–ª–∏ –º–∞—Å—Å–∏–≤
      if (newValue.trim().startsWith('{') || newValue.trim().startsWith('[')) {
        try {
          JSON.parse(newValue);
        } catch (e) {
          if (!confirm('–í–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON. –í—Å—ë —Ä–∞–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å?')) {
            return;
          }
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      localStorage.setItem(key, newValue);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫
      this.refreshLocalStorageViewer();

      // –í—ã–±–∏—Ä–∞–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
      setTimeout(() => {
        const editedKeyElement = document.querySelector(`.localstorage-key[data-key="${key}"]`);
        if (editedKeyElement) {
          editedKeyElement.click();
        }
      }, 100);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã
    document.getElementById('cancel-localstorage-edit').addEventListener('click', () => {
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      valueContainer.removeChild(textarea);
      valueContainer.removeChild(buttonsContainer);
      valueDisplay.style.display = '';
    });
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ localStorage
   */
  deleteLocalStorageItem() {
    const activeKey = document.querySelector('.localstorage-key.active');
    if (!activeKey) {
      alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
      return;
    }

    const key = activeKey.dataset.key;

    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç '${key}'?`)) {
      return;
    }

    // –£–¥–∞–ª—è–µ–º –∏–∑ localStorage
    localStorage.removeItem(key);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫
    this.refreshLocalStorageViewer();
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
   */
  analyzeCoursesData() {
    const analysisContainer = document.getElementById('course-analysis');
    if (!analysisContainer) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –∫—É—Ä—Å–æ–≤
    if (!window.courseManager || !window.courseManager.courses) {
      analysisContainer.innerHTML = '<p>–ú–µ–Ω–µ–¥–∂–µ—Ä –∫—É—Ä—Å–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</p>';
      return;
    }

    const courses = window.courseManager.courses;
    const courseIds = Object.keys(courses);

    if (courseIds.length === 0) {
      analysisContainer.innerHTML = '<p>–î–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</p>';
      return;
    }

    let analysisHtml = `<h3>–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤</h3>`;

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    let totalDays = 0;
    let totalLessons = 0;
    let totalWebhooks = 0;
    let totalSpecialLessons = 0;
    let totalNoDayLessons = 0;
    const webhookUrls = [];

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫—É—Ä—Å
    courseIds.forEach(courseId => {
      const course = courses[courseId];
      let courseHtml = `<h3>–ö—É—Ä—Å: ${course.title || courseId}</h3>`;

      // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞
      let daysCount = course.days ? course.days.length : 0;
      let lessonCount = 0;
      let courseWebhooks = 0;
      let specialLessonsCount = course.specialLessons ? course.specialLessons.length : 0;
      let noDayLessonsCount = course.noDayLessons ? course.noDayLessons.length : 0;

      // –ê–Ω–∞–ª–∏–∑ –¥–Ω–µ–π –∏ —É—Ä–æ–∫–æ–≤
      let daysList = '';
      if (course.days && course.days.length > 0) {
        course.days.forEach(day => {
          daysList += `<div style="margin-top: 8px;"><span style="color: #e5c07b;">–î–µ–Ω—å ${day.id}:</span> ${day.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</div>`;

          // –ê–Ω–∞–ª–∏–∑ —É—Ä–æ–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
          if (day.lessons && Array.isArray(day.lessons)) {
            daysList += `<ul style="margin-top: 2px; padding-left: 20px;">`;

            day.lessons.forEach((lesson, lessonIndex) => {
              lessonCount++;
              totalLessons++;

              // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É—Ä–æ–∫–µ
              let lessonInfo = `<li><span style="color: #98c379;">–£—Ä–æ–∫ ${lesson.id}:</span> ${lesson.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`;

              // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
              if (lesson.contentSource) {
                if (lesson.contentSource.type === 'webhook') {
                  lessonInfo += ` <span style="color: #61afef;">[–≤–µ–±—Ö—É–∫]</span>`;
                  courseWebhooks++;
                  totalWebhooks++;
                  webhookUrls.push(lesson.contentSource.url);
                } else if (lesson.contentSource.type === 'local') {
                  lessonInfo += ` <span style="color: #c678dd;">[–ª–æ–∫–∞–ª—å–Ω—ã–π]</span>`;
                } else if (lesson.contentSource.type === 'markdown') {
                  lessonInfo += ` <span style="color: #56b6c2;">[–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π]</span>`;
                }
              }

              // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–µ
              if (lesson.testSource && lesson.testSource.type !== 'none') {
                lessonInfo += ` <span style="color: #d19a66;">[—Ç–µ—Å—Ç]</span>`;

                if (lesson.testSource.type === 'webhook') {
                  courseWebhooks++;
                  totalWebhooks++;
                  webhookUrls.push(lesson.testSource.url);
                }
              }

              // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞–Ω–∏–∏
              if (lesson.taskSource && lesson.taskSource.type !== 'none') {
                lessonInfo += ` <span style="color: #e06c75;">[–∑–∞–¥–∞–Ω–∏–µ]</span>`;
              }

              // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—É–¥–∏–æ
              if (lesson.audioSource && lesson.audioSource.type !== 'none') {
                lessonInfo += ` <span style="color: #56b6c2;">[–∞—É–¥–∏–æ]</span>`;
              }

              lessonInfo += `</li>`;
              daysList += lessonInfo;
            });

            daysList += `</ul>`;
          } else {
            daysList += `<div style="padding-left: 20px; color: #e06c75;">–ù–µ—Ç —É—Ä–æ–∫–æ–≤</div>`;
          }
        });
      } else {
        daysList = `<div style="color: #e06c75;">–î–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>`;
      }

      // –ê–Ω–∞–ª–∏–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
      let specialLessonsList = '';
      if (course.specialLessons && course.specialLessons.length > 0) {
        specialLessonsList += `<div style="margin-top: 8px;"><span style="color: #c678dd;">–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Ä–æ–∫–∏:</span></div><ul style="margin-top: 2px; padding-left: 20px;">`;

        course.specialLessons.forEach(lesson => {
          totalSpecialLessons++;

          // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É—Ä–æ–∫–µ
          let lessonInfo = `<li><span style="color: #98c379;">–£—Ä–æ–∫ ${lesson.id}:</span> ${lesson.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`;

          // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
          if (lesson.contentSource) {
            if (lesson.contentSource.type === 'webhook') {
              lessonInfo += ` <span style="color: #61afef;">[–≤–µ–±—Ö—É–∫]</span>`;
              courseWebhooks++;
              totalWebhooks++;
              webhookUrls.push(lesson.contentSource.url);
            } else if (lesson.contentSource.type === 'local') {
              lessonInfo += ` <span style="color: #c678dd;">[–ª–æ–∫–∞–ª—å–Ω—ã–π]</span>`;
            } else if (lesson.contentSource.type === 'markdown') {
              lessonInfo += ` <span style="color: #56b6c2;">[–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π]</span>`;
            }
          }

          lessonInfo += `</li>`;
          specialLessonsList += lessonInfo;
        });

        specialLessonsList += `</ul>`;
      } else {
        specialLessonsList = `<div style="color: #e06c75;">–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>`;
      }

      // –ê–Ω–∞–ª–∏–∑ —É—Ä–æ–∫–æ–≤ –±–µ–∑ –¥–Ω—è
      let noDayLessonsList = '';
      if (course.noDayLessons && course.noDayLessons.length > 0) {
        noDayLessonsList += `<div style="margin-top: 8px;"><span style="color: #56b6c2;">–£—Ä–æ–∫–∏ –±–µ–∑ –¥–Ω—è:</span></div><ul style="margin-top: 2px; padding-left: 20px;">`;

        course.noDayLessons.forEach(lesson => {
          totalNoDayLessons++;

          // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É—Ä–æ–∫–µ
          let lessonInfo = `<li><span style="color: #98c379;">–£—Ä–æ–∫ ${lesson.id}:</span> ${lesson.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`;

          // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
          if (lesson.contentSource) {
            if (lesson.contentSource.type === 'webhook') {
              lessonInfo += ` <span style="color: #61afef;">[–≤–µ–±—Ö—É–∫]</span>`;
              courseWebhooks++;
              totalWebhooks++;
              webhookUrls.push(lesson.contentSource.url);
            } else if (lesson.contentSource.type === 'local') {
              lessonInfo += ` <span style="color: #c678dd;">[–ª–æ–∫–∞–ª—å–Ω—ã–π]</span>`;
            } else if (lesson.contentSource.type === 'markdown') {
              lessonInfo += ` <span style="color: #56b6c2;">[–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π]</span>`;
            }
          }

          lessonInfo += `</li>`;
          noDayLessonsList += lessonInfo;
        });

        noDayLessonsList += `</ul>`;
      } else {
        noDayLessonsList = `<div style="color: #e06c75;">–£—Ä–æ–∫–∏ –±–µ–∑ –¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>`;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
      totalDays += daysCount;

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫—É—Ä—Å–∞
      courseHtml += `
        <div style="margin-top: 5px;">
          <div><span style="color: #61afef;">ID:</span> ${courseId}</div>
          <div><span style="color: #61afef;">–ù–∞–∑–≤–∞–Ω–∏–µ:</span> ${course.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</div>
          <div><span style="color: #61afef;">–î–Ω–µ–π:</span> ${daysCount}</div>
          <div><span style="color: #61afef;">–£—Ä–æ–∫–æ–≤:</span> ${lessonCount}</div>
          <div><span style="color: #61afef;">–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —É—Ä–æ–∫–æ–≤:</span> ${specialLessonsCount}</div>
          <div><span style="color: #61afef;">–£—Ä–æ–∫–æ–≤ –±–µ–∑ –¥–Ω—è:</span> ${noDayLessonCount}</div>
          <div><span style="color: #61afef;">–í–µ–±—Ö—É–∫–æ–≤:</span> ${courseWebhooks}</div>
          <div><span style="color: #61afef;">–°–∫—Ä—ã—Ç—ã–π:</span> ${course.hidden ? '–î–∞' : '–ù–µ—Ç'}</div>
          ${course.redirectUrl ? `<div><span style="color: #61afef;">URL –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</span> ${course.redirectUrl}</div>` : ''}
        </div>
      `;

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –¥–Ω–µ–π –∏ —É—Ä–æ–∫–æ–≤
      courseHtml += `
        <div style="margin-top: 10px;">
          <div style="color: #61afef; font-weight: bold;">–î–Ω–∏ –∏ —É—Ä–æ–∫–∏:</div>
          ${daysList}
        </div>

        <div style="margin-top: 10px;">
          <div style="color: #61afef; font-weight: bold;">–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Ä–æ–∫–∏:</div>
          ${specialLessonsList}
        </div>

        <div style="margin-top: 10px;">
          <div style="color: #61afef; font-weight: bold;">–£—Ä–æ–∫–∏ –±–µ–∑ –¥–Ω—è:</div>
          ${noDayLessonsList}
        </div>
      `;

      analysisHtml += courseHtml;
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    analysisHtml = `
      <div>
        <h3>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
        <div><span style="color: #61afef;">–í—Å–µ–≥–æ –∫—É—Ä—Å–æ–≤:</span> ${courseIds.length}</div>
        <div><span style="color: #61afef;">–í—Å–µ–≥–æ –¥–Ω–µ–π:</span> ${totalDays}</div>
        <div><span style="color: #61afef;">–í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤:</span> ${totalLessons}</div>
        <div><span style="color: #61afef;">–í—Å–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —É—Ä–æ–∫–æ–≤:</span> ${totalSpecialLessons}</div>
        <div><span style="color: #61afef;">–í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤ –±–µ–∑ –¥–Ω—è:</span> ${totalNoDayLessons}</div>
        <div><span style="color: #61afef;">–í—Å–µ–≥–æ –≤–µ–±—Ö—É–∫–æ–≤:</span> ${totalWebhooks}</div>
      </div>
      ${analysisHtml}
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ URL –≤–µ–±—Ö—É–∫–æ–≤
    if (webhookUrls.length > 0) {
      // –°—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ URL
      const uniqueUrls = [...new Set(webhookUrls)];

      analysisHtml += `
        <div style="margin-top: 20px;">
          <h3>–ê–Ω–∞–ª–∏–∑ URL –≤–µ–±—Ö—É–∫–æ–≤</h3>
          <div><span style="color: #61afef;">–í—Å–µ–≥–æ –≤–µ–±—Ö—É–∫–æ–≤:</span> ${webhookUrls.length}</div>
          <div><span style="color: #61afef;">–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö URL:</span> ${uniqueUrls.length}</div>
          <div style="margin-top: 10px;">
            <div style="color: #61afef; font-weight: bold;">–°–ø–∏—Å–æ–∫ URL:</div>
            <ul style="margin-top: 5px; padding-left: 20px;">
              ${uniqueUrls.map(url => `<li>${url}</li>`).join('')}
            </ul>
          </div>
        </div>
      `;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTML
    analysisContainer.innerHTML = analysisHtml;
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–Ω–∞—á–∫–æ–≤ –∫ —Ñ–æ—Ä–º–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
   */
  addInfoBadgesToAdminForms() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (!window.location.pathname.includes('admin.html')) return;

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç–∞—Ç—É—Å–∞ –∫ –ø–æ–ª—è–º –≤–µ–±—Ö—É–∫–æ–≤
    const webhookFields = document.querySelectorAll('input[id*="webhook"]:not([data-dev-mode-badged])');

    webhookFields.forEach(field => {
      // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç, —á—Ç–æ–±—ã –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–Ω–∞—á–æ–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ
      field.setAttribute('data-dev-mode-badged', 'true');

      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–ª—è –∏ –∑–Ω–∞—á–∫–∞
      const container = document.createElement('div');
      container.className = 'admin-webhook-info';
      container.style.width = '100%';
      container.style.display = 'flex';
      container.style.alignItems = 'center';

      // –ö–ª–æ–Ω–∏—Ä—É–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
      const clonedField = field.cloneNode(true);
      clonedField.style.flex = '1';

      // –°–æ–∑–¥–∞–µ–º –∑–Ω–∞—á–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      const infoIcon = document.createElement('span');
      infoIcon.innerHTML = `<i class="fas fa-info-circle"></i>`;
      infoIcon.style.marginLeft = '5px';
      infoIcon.style.color = '#3498db';
      infoIcon.style.cursor = 'pointer';

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
      infoIcon.title = '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å URL';

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ URL
      infoIcon.addEventListener('click', () => {
        this.testWebhookUrl(clonedField.value);
      });

      // –°–æ–∑–¥–∞–µ–º –∑–Ω–∞—á–æ–∫ —Å—Ç–∞—Ç—É—Å–∞
      const statusIcon = document.createElement('span');
      statusIcon.innerHTML = `<i class="fas fa-question-circle"></i>`;
      statusIcon.style.marginLeft = '5px';
      statusIcon.style.color = '#e5c07b';
      statusIcon.style.cursor = 'pointer';
      statusIcon.title = '–°—Ç–∞—Ç—É—Å URL –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω';

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –∏ –∑–Ω–∞—á–∫–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      container.appendChild(clonedField);
      container.appendChild(infoIcon);
      container.appendChild(statusIcon);

      // –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      field.parentNode.insertBefore(container, field);
      field.parentNode.removeChild(field);

      // –ö–æ–ø–∏—Ä—É–µ–º ID –∏ –¥—Ä—É–≥–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã
      clonedField.id = field.id;
      clonedField.name = field.name;

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—è
      clonedField.addEventListener('input', () => {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ URL
        statusIcon.innerHTML = `<i class="fas fa-question-circle"></i>`;
        statusIcon.style.color = '#e5c07b';
        statusIcon.title = '–°—Ç–∞—Ç—É—Å URL –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω';
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
      if (clonedField.value) {
        this.checkWebhookUrl(clonedField.value, statusIcon);
      }
    });
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–Ω–∞—á–∫–æ–≤ –∏–∑ —Ñ–æ—Ä–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
   */
  removeInfoBadgesFromAdminForms() {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç data-dev-mode-badged —É –≤—Å–µ—Ö –ø–æ–ª–µ–π
    const webhookFields = document.querySelectorAll('input[data-dev-mode-badged="true"]');

    webhookFields.forEach(field => {
      field.removeAttribute('data-dev-mode-badged');
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ URL –≤–µ–±—Ö—É–∫–∞
   */
  checkWebhookUrl(url, statusIcon) {
    if (!url) {
      statusIcon.innerHTML = `<i class="fas fa-times-circle"></i>`;
      statusIcon.style.color = '#e06c75';
      statusIcon.title = 'URL –Ω–µ —É–∫–∞–∑–∞–Ω';
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–æ–∫ –Ω–∞ "–∑–∞–≥—Ä—É–∑–∫–∞"
    statusIcon.innerHTML = `<i class="fas fa-spinner fa-spin"></i>`;
    statusIcon.style.color = '#e5c07b';
    statusIcon.title = '–ü—Ä–æ–≤–µ—Ä–∫–∞ URL...';

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É URL
    fetch(url, { method: 'GET', mode: 'cors', headers: { 'Accept': 'application/json, text/plain, */*' } })
      .then(response => {
        if (response.ok) {
          statusIcon.innerHTML = `<i class="fas fa-check-circle"></i>`;
          statusIcon.style.color = '#98c379';
          statusIcon.title = `URL –¥–æ—Å—Ç—É–ø–µ–Ω (${response.status} ${response.statusText})`;
        } else {
          statusIcon.innerHTML = `<i class="fas fa-exclamation-circle"></i>`;
          statusIcon.style.color = '#e06c75';
          statusIcon.title = `–û—à–∏–±–∫–∞: ${response.status} ${response.statusText}`;
        }
      })
      .catch(error => {
        statusIcon.innerHTML = `<i class="fas fa-times-circle"></i>`;
        statusIcon.style.color = '#e06c75';
        statusIcon.title = `–û—à–∏–±–∫–∞: ${error.message}`;
      });
  }

  /**
   * –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ URL –≤–µ–±—Ö—É–∫–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
   */
  testWebhookUrl(url) {
    if (!url) {
      alert('URL –Ω–µ —É–∫–∞–∑–∞–Ω');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const modal = document.createElement('div');
    modal.style.position = 'fixed';
    modal.style.top = '0';
    modal.style.left = '0';
    modal.style.width = '100%';
    modal.style.height = '100%';
    modal.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';
    modal.style.zIndex = '10000';
    modal.style.display = 'flex';
    modal.style.justifyContent = 'center';
    modal.style.alignItems = 'center';

    const modalContent = document.createElement('div');
    modalContent.style.backgroundColor = '#282c34';
    modalContent.style.color = '#abb2bf';
    modalContent.style.padding = '20px';
    modalContent.style.borderRadius = '5px';
    modalContent.style.boxShadow = '0 0 10px rgba(0, 0, 0, 0.3)';
    modalContent.style.width = '80%';
    modalContent.style.maxWidth = '800px';
    modalContent.style.maxHeight = '80vh';
    modalContent.style.overflow = 'auto';

    modalContent.innerHTML = `
      <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
        <h3 style="margin: 0;">–ü—Ä–æ–≤–µ—Ä–∫–∞ URL –≤–µ–±—Ö—É–∫–∞</h3>
        <button id="close-webhook-test" style="background: none; border: none; color: #e06c75; font-size: 20px; cursor: pointer;">&times;</button>
      </div>
      <div>
        <p>URL: <span style="color: #61afef;">${url}</span></p>
        <div id="webhook-test-status" style="margin: 15px 0;">
          <p style="display: flex; align-items: center;">
            <i class="fas fa-spinner fa-spin" style="margin-right: 10px;"></i>
            –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...
          </p>
        </div>
      </div>
    `;

    modal.appendChild(modalContent);
    document.body.appendChild(modal);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    document.getElementById('close-webhook-test').addEventListener('click', () => {
      document.body.removeChild(modal);
    });

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É URL
    const startTime = performance.now();

    fetch(url, { 
      method: 'GET', 
      mode: 'cors', 
      headers: { 'Accept': 'application/json, text/plain, */*' }
    })
      .then(response => {
        const endTime = performance.now();
        const duration = (endTime - startTime).toFixed(2);

        return response.text().then(text => {
          return { 
            status: response.status, 
            statusText: response.statusText, 
            headers: Object.fromEntries(response.headers.entries()),
            body: text,
            duration: duration
          };
        });
      })
      .then(result => {
        const statusDiv = document.getElementById('webhook-test-status');

        let formattedBody = result.body;

        // –ü—ã—Ç–∞–µ–º—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å JSON
        try {
          const parsedBody = JSON.parse(result.body);
          formattedBody = JSON.stringify(parsedBody, null, 2);
        } catch (e) {
          // –ù–µ JSON, –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ HTML
          if (result.body.trim().startsWith('<!DOCTYPE') || result.body.trim().startsWith('<html')) {
            formattedBody = 'HTML-–∫–æ–Ω—Ç–µ–Ω—Ç (—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)';
            if (result.body.length < 5000) {
              formattedBody = result.body.replace(/</g, '&lt;').replace(/>/g, '&gt;');
            }
          }
        }

        let statusColor = '#e06c75'; // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –æ—à–∏–±–æ–∫
        let statusIcon = 'fa-times-circle';

        if (result.status >= 200 && result.status < 300) {
          statusColor = '#98c379'; // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —É—Å–ø–µ—Ö–∞
          statusIcon = 'fa-check-circle';
        } else if (result.status >= 300 && result.status < 400) {
          statusColor = '#61afef'; // –°–∏–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
          statusIcon = 'fa-info-circle';
        } else if (result.status >= 400 && result.status < 500) {
          statusColor = '#e5c07b'; // –ñ–µ–ª—Ç—ã–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
          statusIcon = 'fa-exclamation-circle';
        }

        statusDiv.innerHTML = `
          <p style="display: flex; align-items: center; color: ${statusColor};">
            <i class="fas ${statusIcon}" style="margin-right: 10px;"></i>
            –°—Ç–∞—Ç—É—Å: ${result.status} ${result.statusText} (${result.duration} –º—Å)
          </p>
          <div style="margin-top: 15px;">
            <h4 style="margin: 0 0 10px 0;">–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:</h4>
            <pre style="margin: 0; background-color: #2c313a; padding: 10px; border-radius: 3px; overflow-x: auto;">${JSON.stringify(result.headers, null, 2)}</pre>
          </div>
          <div style="margin-top: 15px;">
            <h4 style="margin: 0 0 10px 0;">–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:</h4>
            <pre style="margin: 0; background-color: #2c313a; padding: 10px; border-radius: 3px; overflow-x: auto; max-height: 300px;">${formattedBody}</pre>
          </div>
        `;
      })
      .catch(error => {
        const statusDiv = document.getElementById('webhook-test-status');

        statusDiv.innerHTML = `
          <p style="display: flex; align-items: center; color: #e06c75;">
            <i class="fas fa-times-circle" style="margin-right: 10px;"></i>
            –û—à–∏–±–∫–∞: ${error.message}
          </p>
          <div style="margin-top: 15px;">
            <p>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏:</p>
            <ul style="padding-left: 20px;">
              <li>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</li>
              <li>–ü—Ä–æ–±–ª–µ–º—ã —Å CORS (Cross-Origin Resource Sharing)</li>
              <li>–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç</li>
              <li>–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∏–ª–∏ –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç</li>
            </ul>
          </div>
        `;
      });
  }
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä DevMode
const devMode = new DevMode();
export default devMode;