
/**
 * –ú–æ–¥—É–ª—å —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–∞—Ö –∏ –æ—Ç–≤–µ—Ç–∞—Ö –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
 */

class DevMode {
  constructor() {
    this.enabled = true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω
    this.logs = [];
    this.maxLogs = 100; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
    this.requestCounter = 0;
    this._initialized = false;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
   */
  initialize() {
    if (this._initialized) return;
    
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞...');
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –¥–ª—è –ª–æ–≥–æ–≤
    this.createDevPanel();
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ fetch
    this.overrideFetch();
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º XMLHttpRequest
    this.overrideXHR();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    this.addDevModeToggle();
    
    this._initialized = true;
    console.log('üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }
  
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
   */
  createDevPanel() {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–∞–Ω–µ–ª–∏
    const devPanel = document.createElement('div');
    devPanel.id = 'dev-mode-panel';
    devPanel.className = 'dev-panel';
    devPanel.innerHTML = `
      <div class="dev-panel-header">
        <h3>–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞</h3>
        <div class="dev-panel-actions">
          <button id="dev-panel-analyze" title="–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–æ–≤"><i class="fas fa-chart-bar"></i></button>
          <button id="dev-panel-debug" title="–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"><i class="fas fa-bug"></i></button>
          <button id="dev-panel-storage" title="LocalStorage –º–µ–Ω–µ–¥–∂–µ—Ä"><i class="fas fa-database"></i></button>
          <button id="dev-panel-sync" title="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –æ–±–ª–∞–∫–æ–º"><i class="fas fa-sync-alt"></i></button>
          <button id="dev-panel-clear" title="–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏"><i class="fas fa-trash"></i></button>
          <button id="dev-panel-minimize" title="–°–≤–µ—Ä–Ω—É—Ç—å –ø–∞–Ω–µ–ª—å"><i class="fas fa-minus"></i></button>
        </div>
      </div>
      <div class="dev-panel-body">
        <div id="dev-panel-logs"></div>
      </div>
    `;
    
    document.body.appendChild(devPanel);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –ø–∞–Ω–µ–ª–∏
    this.addDevPanelStyles();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    document.getElementById('dev-panel-clear').addEventListener('click', () => {
      this.clearLogs();
    });
    
    document.getElementById('dev-panel-minimize').addEventListener('click', () => {
      devPanel.classList.toggle('minimized');
      if (devPanel.classList.contains('minimized')) {
        document.getElementById('dev-panel-minimize').innerHTML = '<i class="fas fa-plus"></i>';
      } else {
        document.getElementById('dev-panel-minimize').innerHTML = '<i class="fas fa-minus"></i>';
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    document.getElementById('dev-panel-analyze').addEventListener('click', () => {
      this.analyzeAndDisplayCourses();
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    document.getElementById('dev-panel-sync').addEventListener('click', () => {
      this.syncWithCloud();
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ª–∞–¥–∫–∏
    document.getElementById('dev-panel-debug').addEventListener('click', () => {
      this.showDebugInfo();
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ LocalStorage
    document.getElementById('dev-panel-storage').addEventListener('click', () => {
      this.showLocalStorageManager();
    });
  }
  
  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è –ø–∞–Ω–µ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
   */
  addDevPanelStyles() {
    const styleElement = document.createElement('style');
    styleElement.textContent = `
      .dev-panel {
        position: fixed;
        bottom: 0;
        right: 0;
        width: 500px;
        max-width: 100%;
        height: 300px;
        background-color: rgba(40, 44, 52, 0.95);
        color: #eee;
        border-top-left-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
        font-family: 'Consolas', 'Monaco', monospace;
        font-size: 12px;
        z-index: 10000;
        display: flex;
        flex-direction: column;
        transition: all 0.3s ease;
      }
      
      .dev-panel.minimized {
        height: 36px;
        overflow: hidden;
      }
      
      .dev-panel-header {
        background-color: #1e2127;
        padding: 8px 10px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-top-left-radius: 8px;
        user-select: none;
      }
      
      .dev-panel-header h3 {
        margin: 0;
        font-size: 14px;
        font-weight: normal;
      }
      
      .dev-panel-actions {
        display: flex;
        gap: 5px;
      }
      
      .dev-panel-actions button {
        background: none;
        border: none;
        color: #aaa;
        cursor: pointer;
        font-size: 12px;
        width: 20px;
        height: 20px;
        padding: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 3px;
      }
      
      .dev-panel-actions button:hover {
        background-color: rgba(255, 255, 255, 0.1);
        color: #fff;
      }
      
      .dev-panel-body {
        flex: 1;
        overflow-y: auto;
        padding: 10px;
      }
      
      #dev-panel-logs {
        font-family: 'Consolas', 'Monaco', monospace;
        font-size: 12px;
        line-height: 1.4;
      }
      
      .dev-log-entry {
        margin-bottom: 10px;
        padding-bottom: 10px;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      }
      
      .dev-log-entry-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 3px;
      }
      
      .dev-log-timestamp {
        color: #aaa;
        font-size: 10px;
      }
      
      .dev-log-url {
        color: #61afef;
        word-break: break-all;
      }
      
      .dev-log-method {
        color: #98c379;
        font-weight: bold;
        margin-right: 5px;
      }
      
      .dev-log-status {
        font-weight: bold;
      }
      
      .dev-log-status.success {
        color: #98c379;
      }
      
      .dev-log-status.error {
        color: #e06c75;
      }
      
      .dev-log-button {
        padding: 2px 5px;
        background-color: rgba(255, 255, 255, 0.1);
        border: none;
        border-radius: 3px;
        color: #ddd;
        cursor: pointer;
        font-size: 11px;
        margin-top: 5px;
      }
      
      .dev-log-button:hover {
        background-color: rgba(255, 255, 255, 0.2);
      }
      
      .dev-log-details {
        background-color: rgba(0, 0, 0, 0.2);
        padding: 5px;
        margin-top: 5px;
        border-radius: 3px;
        display: none;
      }
      
      .dev-log-details.visible {
        display: block;
      }
      
      .dev-log-label {
        color: #d19a66;
        margin-right: 5px;
      }
      
      .dev-log-message {
        word-break: break-word;
      }
      
      .dev-log-message.success {
        color: #98c379;
      }
      
      .dev-log-message.error {
        color: #e06c75;
      }
      
      .dev-log-message.warning {
        color: #e5c07b;
      }
      
      .dev-log-message.info {
        color: #61afef;
      }
      
      .dev-info-badge {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        width: 18px;
        height: 18px;
        border-radius: 50%;
        background-color: rgba(97, 175, 239, 0.8);
        color: white;
        font-size: 12px;
        cursor: pointer;
        margin-left: 5px;
        vertical-align: middle;
      }
      
      .dev-info-tooltip {
        position: absolute;
        background-color: #282c34;
        color: #eee;
        padding: 10px;
        border-radius: 5px;
        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.3);
        z-index: 10001;
        max-width: 400px;
        font-size: 12px;
        display: none;
      }
      
      .dev-info-tooltip.visible {
        display: block;
      }
      
      .dev-info-badge:hover + .dev-info-tooltip {
        display: block;
      }
      
      .dev-mode-toggle {
        position: fixed;
        top: 10px;
        right: 10px;
        background-color: rgba(40, 44, 52, 0.8);
        color: white;
        border: none;
        border-radius: 4px;
        padding: 5px 10px;
        cursor: pointer;
        font-size: 12px;
        z-index: 9999;
        display: flex;
        align-items: center;
        gap: 5px;
      }
      
      .dev-mode-toggle i {
        font-size: 14px;
      }
      
      .dev-mode-toggle.enabled {
        background-color: rgba(152, 195, 121, 0.8);
      }
      
      /* –°—Ç–∏–ª–∏ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–Ω–∞—á–∫–æ–≤ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ */
      .admin-form-group {
        position: relative;
      }
      
      .admin-webhook-info {
        position: relative;
        display: inline-block;
      }
      
      /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */
      @media (max-width: 768px) {
        .dev-panel {
          width: 100%;
          height: 200px;
        }
      }
    `;
    document.head.appendChild(styleElement);
  }
  
  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
   */
  addDevModeToggle() {
    const toggle = document.createElement('button');
    toggle.id = 'dev-mode-toggle';
    toggle.className = 'dev-mode-toggle' + (this.enabled ? ' enabled' : '');
    toggle.innerHTML = `
      <i class="fas fa-code"></i>
      <span>–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞</span>
    `;
    
    toggle.addEventListener('click', () => {
      this.toggleDevMode();
    });
    
    document.body.appendChild(toggle);
  }
  
  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
   */
  toggleDevMode() {
    this.enabled = !this.enabled;
    
    const toggle = document.getElementById('dev-mode-toggle');
    const devPanel = document.getElementById('dev-mode-panel');
    
    if (this.enabled) {
      toggle.classList.add('enabled');
      devPanel.style.display = 'flex';
      this.addInfoBadgesToAdminForms();
    } else {
      toggle.classList.remove('enabled');
      devPanel.style.display = 'none';
      this.removeInfoBadgesFromAdminForms();
    }
    
    console.log(`üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ ${this.enabled ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}`);
  }
  
  /**
   * –ü–µ—Ä–µ—Ö–≤–∞—Ç –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ fetch
   */
  overrideFetch() {
    const originalFetch = window.fetch;
    const self = this;
    
    window.fetch = function(resource, init) {
      const startTime = performance.now();
      const requestId = ++self.requestCounter;
      
      let method = 'GET';
      let requestBody = null;
      
      if (init) {
        method = init.method || 'GET';
        requestBody = init.body || null;
      }
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
      const requestInfo = {
        id: requestId,
        url: resource instanceof Request ? resource.url : resource,
        method: method,
        headers: init?.headers ? (init.headers instanceof Headers ? Object.fromEntries(init.headers.entries()) : init.headers) : {},
        body: requestBody,
        timestamp: new Date(),
        startTime: startTime
      };
      
      // –ï—Å–ª–∏ —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω, –ª–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
      if (self.enabled) {
        self.logRequest(requestInfo);
      }
      
      // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π fetch
      return originalFetch.apply(this, arguments)
        .then(response => {
          const endTime = performance.now();
          const duration = endTime - startTime;
          
          // –ö–ª–æ–Ω–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–ª–æ
          const clonedResponse = response.clone();
          
          clonedResponse.text().then(responseText => {
            const responseInfo = {
              status: response.status,
              statusText: response.statusText,
              headers: Object.fromEntries(response.headers.entries()),
              body: responseText,
              duration: duration.toFixed(2)
            };
            
            // –ï—Å–ª–∏ —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω, –ª–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            if (self.enabled) {
              self.logResponse(requestId, responseInfo);
            }
          }).catch(err => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞:', err);
          });
          
          return response;
        })
        .catch(error => {
          const endTime = performance.now();
          const duration = endTime - startTime;
          
          // –ï—Å–ª–∏ —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
          if (self.enabled) {
            self.logError(requestId, error, duration.toFixed(2));
          }
          
          throw error;
        });
    };
  }
  
  /**
   * –ü–µ—Ä–µ—Ö–≤–∞—Ç XMLHttpRequest
   */
  overrideXHR() {
    const self = this;
    const originalOpen = XMLHttpRequest.prototype.open;
    const originalSend = XMLHttpRequest.prototype.send;
    
    XMLHttpRequest.prototype.open = function(method, url, async, user, password) {
      this._devModeInfo = {
        id: ++self.requestCounter,
        method: method,
        url: url,
        timestamp: new Date(),
        startTime: performance.now()
      };
      
      return originalOpen.apply(this, arguments);
    };
    
    XMLHttpRequest.prototype.send = function(body) {
      if (this._devModeInfo) {
        this._devModeInfo.body = body;
        
        // –ï—Å–ª–∏ —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω, –ª–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        if (self.enabled) {
          self.logRequest(this._devModeInfo);
        }
        
        this.addEventListener('load', function() {
          const endTime = performance.now();
          const duration = endTime - this._devModeInfo.startTime;
          
          const responseInfo = {
            status: this.status,
            statusText: this.statusText,
            headers: this.getAllResponseHeaders().split('\r\n').reduce((result, header) => {
              const parts = header.split(': ');
              if (parts[0] && parts[1]) {
                result[parts[0]] = parts[1];
              }
              return result;
            }, {}),
            body: this.responseText,
            duration: duration.toFixed(2)
          };
          
          // –ï—Å–ª–∏ —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω, –ª–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
          if (self.enabled) {
            self.logResponse(this._devModeInfo.id, responseInfo);
          }
        });
        
        this.addEventListener('error', function(error) {
          const endTime = performance.now();
          const duration = endTime - this._devModeInfo.startTime;
          
          // –ï—Å–ª–∏ —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
          if (self.enabled) {
            self.logError(this._devModeInfo.id, new Error('Network Error'), duration.toFixed(2));
          }
        });
        
        this.addEventListener('timeout', function() {
          const endTime = performance.now();
          const duration = endTime - this._devModeInfo.startTime;
          
          // –ï—Å–ª–∏ —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
          if (self.enabled) {
            self.logError(this._devModeInfo.id, new Error('Request Timeout'), duration.toFixed(2));
          }
        });
      }
      
      return originalSend.apply(this, arguments);
    };
  }
  
  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
   */
  logRequest(requestInfo) {
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –º–∞—Å—Å–∏–≤ –ª–æ–≥–æ–≤
    const requestLog = {
      id: requestInfo.id,
      type: 'request',
      method: requestInfo.method,
      url: requestInfo.url,
      headers: requestInfo.headers,
      body: requestInfo.body,
      timestamp: requestInfo.timestamp,
      startTime: requestInfo.startTime
    };
    
    this.logs.push(requestLog);
    this.trimLogs();
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ –ø–∞–Ω–µ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    this.renderLogEntry(requestLog);
  }
  
  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
   */
  logResponse(requestId, responseInfo) {
    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –ø–æ ID
    const requestLog = this.logs.find(log => log.id === requestId && log.type === 'request');
    
    if (requestLog) {
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–≤–µ—Ç–µ
      const responseLog = {
        id: requestId,
        type: 'response',
        status: responseInfo.status,
        statusText: responseInfo.statusText,
        headers: responseInfo.headers,
        body: responseInfo.body,
        duration: responseInfo.duration,
        timestamp: new Date()
      };
      
      this.logs.push(responseLog);
      this.trimLogs();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–Ω–µ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
      this.updateLogEntry(requestId, responseLog);
    }
  }
  
  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
   */
  logError(requestId, error, duration) {
    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –ø–æ ID
    const requestLog = this.logs.find(log => log.id === requestId && log.type === 'request');
    
    if (requestLog) {
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
      const errorLog = {
        id: requestId,
        type: 'error',
        error: error.message || 'Unknown error',
        stack: error.stack,
        duration: duration,
        timestamp: new Date()
      };
      
      this.logs.push(errorLog);
      this.trimLogs();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–Ω–µ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
      this.updateLogEntry(requestId, errorLog);
    }
  }
  
  /**
   * –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–æ–≥–æ–≤
   */
  trimLogs() {
    if (this.logs.length > this.maxLogs) {
      const logsToRemove = this.logs.length - this.maxLogs;
      this.logs.splice(0, logsToRemove);
    }
  }
  
  /**
   * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–∞ –≤ –ø–∞–Ω–µ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
   */
  renderLogEntry(log) {
    const logsContainer = document.getElementById('dev-panel-logs');
    
    if (!logsContainer) return;
    
    const logEntry = document.createElement('div');
    logEntry.id = `dev-log-${log.id}`;
    logEntry.className = 'dev-log-entry';
    
    const timestamp = new Date(log.timestamp).toLocaleTimeString();
    
    if (log.type === 'request') {
      logEntry.innerHTML = `
        <div class="dev-log-entry-header">
          <span>
            <span class="dev-log-method">${log.method}</span>
            <span class="dev-log-url">${this.truncateString(log.url, 60)}</span>
          </span>
          <span class="dev-log-timestamp">${timestamp}</span>
        </div>
        <div>
          <button class="dev-log-button" onclick="window.devMode.toggleLogDetails(${log.id})">–î–µ—Ç–∞–ª–∏</button>
        </div>
        <div id="dev-log-details-${log.id}" class="dev-log-details">
          <div><span class="dev-log-label">URL:</span> ${log.url}</div>
          <div><span class="dev-log-label">–ú–µ—Ç–æ–¥:</span> ${log.method}</div>
          <div><span class="dev-log-label">–ó–∞–≥–æ–ª–æ–≤–∫–∏:</span> ${this.formatJson(log.headers)}</div>
          ${log.body ? `<div><span class="dev-log-label">–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:</span> ${this.formatRequestBody(log.body)}</div>` : ''}
        </div>
      `;
    }
    
    logsContainer.prepend(logEntry);
  }
  
  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–∞ –≤ –ø–∞–Ω–µ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
   */
  updateLogEntry(requestId, log) {
    const logEntry = document.getElementById(`dev-log-${requestId}`);
    
    if (!logEntry) return;
    
    const logDetails = document.getElementById(`dev-log-details-${requestId}`);
    
    if (log.type === 'response') {
      const statusClass = log.status >= 200 && log.status < 400 ? 'success' : 'error';
      
      const logHeader = logEntry.querySelector('.dev-log-entry-header');
      if (logHeader) {
        logHeader.insertAdjacentHTML('beforeend', `
          <span class="dev-log-status ${statusClass}">${log.status}</span>
        `);
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
      const logActions = logEntry.querySelector('.dev-log-button').parentNode;
      if (logActions) {
        logActions.insertAdjacentHTML('beforeend', `
          <span style="margin-left: 10px; color: #aaa;">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${log.duration} –º—Å</span>
        `);
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–≤–µ—Ç–µ
      if (logDetails) {
        logDetails.insertAdjacentHTML('beforeend', `
          <div style="margin-top: 10px; border-top: 1px solid rgba(255, 255, 255, 0.1); padding-top: 5px;">
            <div><span class="dev-log-label">–°—Ç–∞—Ç—É—Å:</span> ${log.status} ${log.statusText}</div>
            <div><span class="dev-log-label">–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:</span> ${this.formatJson(log.headers)}</div>
            <div><span class="dev-log-label">–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:</span> ${this.formatResponseBody(log.body)}</div>
          </div>
        `);
      }
    } else if (log.type === 'error') {
      const logHeader = logEntry.querySelector('.dev-log-entry-header');
      if (logHeader) {
        logHeader.insertAdjacentHTML('beforeend', `
          <span class="dev-log-status error">ERROR</span>
        `);
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
      const logActions = logEntry.querySelector('.dev-log-button').parentNode;
      if (logActions) {
        logActions.insertAdjacentHTML('beforeend', `
          <span style="margin-left: 10px; color: #aaa;">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${log.duration} –º—Å</span>
        `);
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
      if (logDetails) {
        logDetails.insertAdjacentHTML('beforeend', `
          <div style="margin-top: 10px; border-top: 1px solid rgba(255, 255, 255, 0.1); padding-top: 5px;">
            <div><span class="dev-log-label">–û—à–∏–±–∫–∞:</span> <span style="color: #e06c75;">${log.error}</span></div>
            ${log.stack ? `<div><span class="dev-log-label">–°—Ç–µ–∫:</span> <pre style="margin: 5px 0; white-space: pre-wrap;">${log.stack}</pre></div>` : ''}
          </div>
        `);
      }
    }
  }
  
  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ª–æ–≥–∞
   */
  toggleLogDetails(logId) {
    const logDetails = document.getElementById(`dev-log-details-${logId}`);
    
    if (logDetails) {
      logDetails.classList.toggle('visible');
    }
  }
  
  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JSON –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  formatJson(obj) {
    try {
      if (!obj) return 'null';
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –≤ —Å—Ç—Ä–æ–∫—É JSON —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
      const jsonString = JSON.stringify(obj, null, 2);
      
      // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ JSON (–ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
      return `<pre style="margin: 5px 0;">${this.highlightJson(jsonString)}</pre>`;
    } catch (error) {
      return String(obj);
    }
  }
  
  /**
   * –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ JSON
   */
  highlightJson(jsonString) {
    // –ü—Ä–æ—Å—Ç–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
    return jsonString
      .replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, (match) => {
        let cls = 'number';
        if (/^"/.test(match)) {
          if (/:$/.test(match)) {
            cls = 'key';
            match = match.replace(/"/, '<span style="color: #d19a66;">').replace(/":\s*$/, '</span>:');
            return match;
          } else {
            cls = 'string';
            return `<span style="color: #98c379;">${match}</span>`;
          }
        } else if (/true|false/.test(match)) {
          cls = 'boolean';
          return `<span style="color: #56b6c2;">${match}</span>`;
        } else if (/null/.test(match)) {
          cls = 'null';
          return `<span style="color: #56b6c2;">${match}</span>`;
        } else {
          return `<span style="color: #d19a66;">${match}</span>`;
        }
      });
  }
  
  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
   */
  formatRequestBody(body) {
    if (!body) return 'null';
    
    if (typeof body === 'string') {
      try {
        // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
        const json = JSON.parse(body);
        return this.formatJson(json);
      } catch (e) {
        // –ï—Å–ª–∏ –Ω–µ JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
        return `<pre style="margin: 5px 0; white-space: pre-wrap;">${body}</pre>`;
      }
    } else if (body instanceof FormData) {
      const entries = Array.from(body.entries());
      if (entries.length === 0) return 'FormData (–ø—É—Å—Ç–æ)';
      
      const formDataObj = {};
      entries.forEach(([key, value]) => {
        formDataObj[key] = value instanceof File ? `File: ${value.name} (${value.type}, ${value.size} bytes)` : value;
      });
      
      return this.formatJson(formDataObj);
    } else if (body instanceof Blob) {
      return `Blob (${body.type}, ${body.size} bytes)`;
    } else {
      // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
      return this.formatJson(body);
    }
  }
  
  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞
   */
  formatResponseBody(body) {
    if (!body) return 'null';
    
    try {
      // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
      const json = JSON.parse(body);
      return this.formatJson(json);
    } catch (e) {
      // –ï—Å–ª–∏ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –±–æ–ª—å—à–æ–µ, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ
      if (body.length > 5000) {
        return `<pre style="margin: 5px 0; white-space: pre-wrap;">${body.substring(0, 5000)}...</pre>
                <button class="dev-log-button" onclick="navigator.clipboard.writeText(\`${body.replace(/`/g, '\\`')}\`).then(() => alert('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!'))">–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</button>`;
      }
      
      // –ï—Å–ª–∏ –Ω–µ JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
      return `<pre style="margin: 5px 0; white-space: pre-wrap;">${body}</pre>`;
    }
  }
  
  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–∫–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º—ã
   */
  addInfoBadgesToAdminForms() {
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–∫–∏ –∫ –ø–æ–ª—è–º –≤–µ–±—Ö—É–∫–æ–≤
    const webhookFields = [
      { 
        id: 'admin-export-webhook-url', 
        description: 'URL –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —ç—Ç–æ—Ç URL –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.'
      },
      { 
        id: 'admin-import-webhook-url', 
        description: 'URL –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–ø—Ä–æ—à–µ–Ω—ã —Å —ç—Ç–æ–≥–æ URL.'
      },
      { 
        id: 'admin-get-webhooks-url', 
        description: 'URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –∏–º–ø–æ—Ä—Ç–∞.'
      },
      { 
        id: 'admin-content-webhook-url', 
        description: 'URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É—Ä–æ–∫–∞. –°–∏—Å—Ç–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ —ç—Ç–æ—Ç URL –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π Markdown –∏–ª–∏ HTML.'
      },
      { 
        id: 'admin-test-webhook-url', 
        description: 'URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç–∞. –°–∏—Å—Ç–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ —ç—Ç–æ—Ç URL –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç.'
      }
    ];
    
    webhookFields.forEach(field => {
      const input = document.getElementById(field.id);
      if (input) {
        const label = input.previousElementSibling;
        if (label) {
          const infoBadge = document.createElement('span');
          infoBadge.className = 'dev-info-badge';
          infoBadge.textContent = 'i';
          infoBadge.setAttribute('data-tooltip', field.description);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
          infoBadge.addEventListener('click', (e) => {
            e.stopPropagation();
            this.showInfoTooltip(e.target, field.description);
          });
          
          label.appendChild(infoBadge);
        }
      }
    });
  }
  
  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –∑–Ω–∞—á–∫–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ–æ—Ä–º
   */
  removeInfoBadgesFromAdminForms() {
    document.querySelectorAll('.dev-info-badge').forEach(badge => {
      badge.remove();
    });
    
    document.querySelectorAll('.dev-info-tooltip').forEach(tooltip => {
      tooltip.remove();
    });
  }
  
  /**
   * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏
   */
  showInfoTooltip(element, text) {
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    document.querySelectorAll('.dev-info-tooltip').forEach(tooltip => {
      tooltip.remove();
    });
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
    const tooltip = document.createElement('div');
    tooltip.className = 'dev-info-tooltip';
    tooltip.textContent = text;
    tooltip.style.left = `${element.offsetLeft + element.offsetWidth + 5}px`;
    tooltip.style.top = `${element.offsetTop - 5}px`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –≤ DOM
    document.body.appendChild(tooltip);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∫–ª–∏–∫—É –∑–∞ –µ–µ –ø—Ä–µ–¥–µ–ª–∞–º–∏
    document.addEventListener('click', function closeTooltip(e) {
      if (e.target !== tooltip && e.target !== element) {
        tooltip.remove();
        document.removeEventListener('click', closeTooltip);
      }
    });
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
    setTimeout(() => {
      tooltip.classList.add('visible');
    }, 10);
  }
  
  /**
   * –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
   */
  clearLogs() {
    this.logs = [];
    document.getElementById('dev-panel-logs').innerHTML = '';
  }
  
  /**
   * –û–±—Ä–µ–∑–∫–∞ —Å—Ç—Ä–æ–∫–∏ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
   */
  truncateString(str, maxLength) {
    if (str.length <= maxLength) return str;
    return str.substring(0, maxLength) + '...';
  }
  
  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –æ–±–ª–∞–∫–æ–º
   */
  async syncWithCloud() {
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤
    const webhookSettingsStr = localStorage.getItem('webhookSettings');
    if (!webhookSettingsStr) {
      this.logMessage('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ localStorage', 'error');
      return;
    }
    
    try {
      const webhookSettings = JSON.parse(webhookSettingsStr);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
      if (webhookSettings.importUrl) {
        this.logMessage(`–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –æ–±–ª–∞–∫–æ–º. URL –∏–º–ø–æ—Ä—Ç–∞: ${webhookSettings.importUrl}`, 'info');
        
        try {
          // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –≤–µ–±—Ö—É–∫–∞
          const response = await fetch(webhookSettings.importUrl, {
            method: 'GET',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            }
          });
          
          if (response.ok) {
            // –ü–æ–ª—É—á–∞–µ–º Content-Type –∑–∞–≥–æ–ª–æ–≤–æ–∫
            const contentType = response.headers.get('content-type') || '';
            this.logMessage(`–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å Content-Type: ${contentType}`, 'info');
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç, –∞ –ø–æ—Ç–æ–º —É–∂–µ —Ä–µ—à–∞–µ–º, –∫–∞–∫ –µ–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
            const text = await response.text();
            this.logMessage(`–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ (${text.length} —Å–∏–º–≤–æ–ª–æ–≤)`, 'info');
            
            let data;
            
            // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
            try {
              data = JSON.parse(text);
              this.logMessage('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã –∫–∞–∫ JSON', 'success');
            } catch (e) {
              this.logMessage(`–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON: ${e.message}`, 'warning');
              
              // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ JSON, –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ plain text –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ JSON
              // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–∏–¥–∞, –≥–¥–µ JSON —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –ø–æ–ª–µ "data"
              if (text.includes('"data"')) {
                try {
                  const regex = /"data"\s*:\s*"(.*?)"/s;
                  const match = text.match(regex);
                  
                  if (match && match[1]) {
                    let jsonString = match[1].replace(/\\"/g, '"').replace(/\\n/g, '\n').replace(/\\\\/g, '\\');
                    
                    // –ò–Ω–æ–≥–¥–∞ –∫–∞–≤—ã—á–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
                    while (jsonString.includes('\\')) {
                      jsonString = jsonString.replace(/\\"/g, '"').replace(/\\n/g, '\n').replace(/\\\\/g, '\\');
                    }
                    
                    this.logMessage('–ò–∑–≤–ª–µ—á–µ–Ω JSON –∏–∑ –ø–æ–ª—è "data"', 'info');
                    data = { courses: JSON.parse(jsonString) };
                  }
                } catch (innerError) {
                  this.logMessage(`–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–ª—è data: ${innerError.message}`, 'error');
                }
              }
            }
            
            // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º –∏—Å–∫–∞—Ç—å JSON –≤ —Ç–µ–∫—Å—Ç–µ
            if (!data) {
              try {
                // –ò—â–µ–º –ª—é–±—É—é JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ —Ç–µ–∫—Å—Ç–µ
                const jsonRegex = /{[\s\S]*}/;
                const match = text.match(jsonRegex);
                
                if (match && match[0]) {
                  const possibleJson = match[0];
                  data = JSON.parse(possibleJson);
                  this.logMessage('–ò–∑–≤–ª–µ—á–µ–Ω JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞', 'info');
                }
              } catch (e) {
                this.logMessage(`–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞: ${e.message}`, 'error');
              }
            }
            
            // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã, —Å–¥–∞–µ–º—Å—è
            if (!data) {
              this.logMessage('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞.', 'error');
              return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è courses
            if (!data.courses) {
              // –ú–æ–∂–µ—Ç –±—ã—Ç—å, —Å–∞–º data –∏ –µ—Å—Ç—å courses
              if (typeof data === 'object' && Object.keys(data).length > 0) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –æ–±—ä–µ–∫—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–ª—é—á —Å –æ–±—ä–µ–∫—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º days/specialLessons
                const courseCandidate = Object.values(data).find(item => 
                  item && typeof item === 'object' && 
                  (item.days || item.specialLessons || item.title)
                );
                
                if (courseCandidate) {
                  this.logMessage('–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∫–∞–∫ courses', 'info');
                  data = { courses: data };
                }
              }
              
              // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç courses, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
              if (!data.courses) {
                this.logMessage('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–∞—Ö', 'error');
                return;
              }
            }
            
            const courseCount = Object.keys(data.courses).length;
            this.logMessage(`–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–æ–≤ (${courseCount} –∫—É—Ä—Å–æ–≤)`, 'success');
            this.logMessage(`–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∫—É—Ä—Å–æ–≤: ${Object.keys(data.courses).join(', ')}`, 'info');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é —Ç–µ–∫—É—â–∏—Ö –∫—É—Ä—Å–æ–≤ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–∫–∞—Ç–∞
            const backupCourses = JSON.parse(JSON.stringify(window.courseManager.courses));
            
            try {
              // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
              window.courseManager.courses = data.courses;
              
              this.logMessage('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã', 'success');
              
              // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤
              if (window.adminInterface && window.adminInterface.loadCoursesList) {
                window.adminInterface.loadCoursesList();
              }
              
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤ localStorage
              localStorage.setItem('coursesBackup', JSON.stringify(backupCourses));
              localStorage.setItem('coursesBackupTimestamp', new Date().toISOString());
              
              // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω URL –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ
              if (webhookSettings.exportUrl) {
                this.logMessage(`–≠–∫—Å–ø–æ—Ä—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ ${webhookSettings.exportUrl}`, 'info');
                
                if (window.adminInterface && window.adminInterface.exportDataToWebhook) {
                  window.adminInterface.exportDataToWebhook(webhookSettings.exportUrl);
                }
              }
            } catch (e) {
              // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—ç–∫–∞–ø
              window.courseManager.courses = backupCourses;
              this.logMessage(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${e.message}`, 'error');
              this.logMessage('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –≤–µ—Ä—Å–∏—è –∫—É—Ä—Å–æ–≤', 'warning');
            }
          } else {
            this.logMessage(`–û—à–∏–±–∫–∞ HTTP! –°—Ç–∞—Ç—É—Å: ${response.status}`, 'error');
          }
        } catch (error) {
          this.logMessage(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –æ–±–ª–∞–∫–æ–º: ${error.message}`, 'error');
        }
      } else {
        this.logMessage('URL –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤–µ–±—Ö—É–∫–æ–≤', 'error');
      }
    } catch (e) {
      this.logMessage(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–µ–±—Ö—É–∫–æ–≤: ${e.message}`, 'error');
    }
  }
  
  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
   */
  logMessage(message, type = 'info') {
    const logsContainer = document.getElementById('dev-panel-logs');
    if (!logsContainer) return;
    
    const timestamp = new Date().toLocaleTimeString();
    
    let typeClass;
    switch (type) {
      case 'success': typeClass = 'success'; break;
      case 'error': typeClass = 'error'; break;
      case 'warning': typeClass = 'warning'; break;
      default: typeClass = 'info';
    }
    
    const logEntry = document.createElement('div');
    logEntry.className = 'dev-log-entry';
    logEntry.innerHTML = `
      <div class="dev-log-entry-header">
        <span class="dev-log-message ${typeClass}">${message}</span>
        <span class="dev-log-timestamp">${timestamp}</span>
      </div>
    `;
    
    logsContainer.prepend(logEntry);
    console.log(`üîß [DevMode] ${message}`);
  }
  
  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  showDebugInfo() {
    if (!window.courseManager) {
      this.logMessage('CourseManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', 'error');
      return;
    }
    
    // –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    this.logMessage(`–¢–µ–∫—É—â–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è: ${window.courseManager.currentProfession || '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞'}`, 'info');
    this.logMessage(`–¢–µ–∫—É—â–∏–π –¥–µ–Ω—å: ${window.courseManager.currentDay ? window.courseManager.currentDay.id : '–Ω–µ –≤—ã–±—Ä–∞–Ω'}`, 'info');
    this.logMessage(`–¢–µ–∫—É—â–∏–π —É—Ä–æ–∫: ${window.courseManager.currentLesson ? window.courseManager.currentLesson.id : '–Ω–µ –≤—ã–±—Ä–∞–Ω'}`, 'info');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ DOM-—ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const daySelectionContainer = document.getElementById('day-selection');
    const taskSelectionContainer = document.getElementById('task-selection');
    const homeContainer = document.getElementById('home');
    const guideContainer = document.getElementById('guide');
    
    this.logMessage(`–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –≤ DOM:`, 'info');
    this.logMessage(`- home: ${homeContainer ? (homeContainer.classList.contains('hidden') ? '—Å–∫—Ä—ã—Ç' : '–≤–∏–¥–µ–Ω') : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`, 'info');
    this.logMessage(`- day-selection: ${daySelectionContainer ? (daySelectionContainer.classList.contains('hidden') ? '—Å–∫—Ä—ã—Ç' : '–≤–∏–¥–µ–Ω') : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`, 'info');
    this.logMessage(`- task-selection: ${taskSelectionContainer ? (taskSelectionContainer.classList.contains('hidden') ? '—Å–∫—Ä—ã—Ç' : '–≤–∏–¥–µ–Ω') : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`, 'info');
    this.logMessage(`- guide: ${guideContainer ? (guideContainer.classList.contains('hidden') ? '—Å–∫—Ä—ã—Ç' : '–≤–∏–¥–µ–Ω') : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`, 'info');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–Ω–µ–π
    const days = window.courseManager.getDays();
    this.logMessage(`–î–æ—Å—Ç—É–ø–Ω–æ –¥–Ω–µ–π: ${days ? days.length : 0}`, 'info');
    
    if (days && days.length > 0) {
      days.forEach((day, index) => {
        this.logMessage(`–î–µ–Ω—å ${index+1}: ID=${day.id}, title=${day.title}, —É—Ä–æ–∫–æ–≤: ${day.lessons ? day.lessons.length : 0}`, 'info');
      });
    }
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ LocalStorage
   */
  showLocalStorageManager() {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç—á–µ—Ç–∞
    const storageReport = document.createElement('div');
    storageReport.className = 'dev-storage-report';
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ localStorage
    const keys = Object.keys(localStorage);
    const totalSize = this.calculateLocalStorageSize();
    
    // –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const summaryInfo = document.createElement('div');
    summaryInfo.className = 'dev-summary-info';
    summaryInfo.style.backgroundColor = 'rgba(0, 0, 0, 0.2)';
    summaryInfo.style.padding = '10px';
    summaryInfo.style.borderRadius = '4px';
    summaryInfo.style.marginBottom = '15px';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const buttonsContainer = document.createElement('div');
    buttonsContainer.style.marginBottom = '10px';
    buttonsContainer.style.display = 'flex';
    buttonsContainer.style.gap = '10px';
    
    // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ–≥–æ localStorage
    const clearAllButton = document.createElement('button');
    clearAllButton.innerText = '–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å LocalStorage';
    clearAllButton.style.backgroundColor = '#e06c75';
    clearAllButton.style.color = 'white';
    clearAllButton.style.border = 'none';
    clearAllButton.style.padding = '8px 15px';
    clearAllButton.style.borderRadius = '4px';
    clearAllButton.style.cursor = 'pointer';
    
    clearAllButton.onclick = () => {
      if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å LocalStorage? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
        localStorage.clear();
        this.logMessage('LocalStorage –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω', 'success');
        this.showLocalStorageManager(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      }
    };
    
    // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const refreshButton = document.createElement('button');
    refreshButton.innerText = '–û–±–Ω–æ–≤–∏—Ç—å';
    refreshButton.style.backgroundColor = '#61afef';
    refreshButton.style.color = 'white';
    refreshButton.style.border = 'none';
    refreshButton.style.padding = '8px 15px';
    refreshButton.style.borderRadius = '4px';
    refreshButton.style.cursor = 'pointer';
    
    refreshButton.onclick = () => {
      this.showLocalStorageManager();
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    buttonsContainer.appendChild(refreshButton);
    buttonsContainer.appendChild(clearAllButton);
    summaryInfo.appendChild(buttonsContainer);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    summaryInfo.innerHTML += `
      <div style="font-weight: bold; color: #56b6c2; margin-bottom: 5px;">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ LocalStorage:</div>
      <div><span style="color: #d19a66;">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:</span> ${keys.length}</div>
      <div><span style="color: #d19a66;">–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:</span> ${totalSize} KB</div>
      <div><span style="color: #d19a66;">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</span> ${((totalSize / 5120) * 100).toFixed(2)}% (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)</div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –æ—Ç—á–µ—Ç
    storageReport.appendChild(summaryInfo);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    const table = document.createElement('table');
    table.className = 'dev-storage-table';
    table.style.width = '100%';
    table.style.borderCollapse = 'collapse';
    table.style.marginBottom = '15px';
    table.style.fontSize = '12px';
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    const thead = document.createElement('thead');
    thead.innerHTML = `
      <tr style="background-color: #1e2127; color: #ddd;">
        <th style="padding: 8px; text-align: left; border-bottom: 1px solid #444;">–ö–ª—é—á</th>
        <th style="padding: 8px; text-align: left; border-bottom: 1px solid #444;">–¢–∏–ø</th>
        <th style="padding: 8px; text-align: right; border-bottom: 1px solid #444;">–†–∞–∑–º–µ—Ä</th>
        <th style="padding: 8px; text-align: center; border-bottom: 1px solid #444;">–î–µ–π—Å—Ç–≤–∏—è</th>
      </tr>
    `;
    table.appendChild(thead);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ–ª–æ —Ç–∞–±–ª–∏—Ü—ã
    const tbody = document.createElement('tbody');
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    keys.sort((a, b) => {
      const sizeA = localStorage.getItem(a).length;
      const sizeB = localStorage.getItem(b).length;
      return sizeB - sizeA;
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ localStorage
    keys.forEach(key => {
      const value = localStorage.getItem(key);
      const size = value.length;
      const sizeKB = (size / 1024).toFixed(2);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
      let type = '–¢–µ–∫—Å—Ç';
      let isJSON = false;
      try {
        const parsed = JSON.parse(value);
        type = typeof parsed === 'object' ? 'JSON' : typeof parsed;
        isJSON = typeof parsed === 'object';
      } catch (e) {
        // –≠—Ç–æ –Ω–µ JSON, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–∏–ø "–¢–µ–∫—Å—Ç"
      }
      
      const tr = document.createElement('tr');
      tr.style.borderBottom = '1px solid rgba(255, 255, 255, 0.1)';
      
      tr.innerHTML = `
        <td style="padding: 8px;">${key}</td>
        <td style="padding: 8px; color: ${type === 'JSON' ? '#98c379' : '#e5c07b'};">${type}</td>
        <td style="padding: 8px; text-align: right;">${sizeKB} KB</td>
        <td style="padding: 8px; text-align: center;">
          <button class="dev-storage-view-btn" data-key="${key}" style="background-color: #56b6c2; color: white; border: none; border-radius: 3px; padding: 3px 8px; margin-right: 5px; cursor: pointer;">–ü—Ä–æ—Å–º–æ—Ç—Ä</button>
          <button class="dev-storage-edit-btn" data-key="${key}" data-is-json="${isJSON}" style="background-color: #98c379; color: white; border: none; border-radius: 3px; padding: 3px 8px; margin-right: 5px; cursor: pointer;">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
          <button class="dev-storage-delete-btn" data-key="${key}" style="background-color: #e06c75; color: white; border: none; border-radius: 3px; padding: 3px 8px; cursor: pointer;">–£–¥–∞–ª–∏—Ç—å</button>
        </td>
      `;
      
      tbody.appendChild(tr);
    });
    
    table.appendChild(tbody);
    storageReport.appendChild(table);
    
    // –°–æ–∑–¥–∞–µ–º –ª–æ–≥-–∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç—á–µ—Ç–∞
    const logEntry = document.createElement('div');
    logEntry.className = 'dev-log-entry';
    logEntry.style.padding = '10px';
    
    const timestamp = new Date().toLocaleTimeString();
    
    logEntry.innerHTML = `
      <div class="dev-log-entry-header">
        <span class="dev-log-message info">–ú–µ–Ω–µ–¥–∂–µ—Ä LocalStorage</span>
        <span class="dev-log-timestamp">${timestamp}</span>
      </div>
      <div style="margin-top: 10px;">
        ${storageReport.outerHTML}
      </div>
    `;
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ª–æ–≥–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à –æ—Ç—á–µ—Ç
    const logsContainer = document.getElementById('dev-panel-logs');
    if (logsContainer) {
      logsContainer.prepend(logEntry);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
      this.setupStorageEventHandlers();
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –¥–æ –æ—Ç—á–µ—Ç–∞
      logEntry.scrollIntoView({ behavior: 'smooth' });
    }
    
    this.logMessage('–ú–µ–Ω–µ–¥–∂–µ—Ä LocalStorage –æ—Ç–∫—Ä—ã—Ç', 'info');
  }
  
  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ LocalStorage
   */
  setupStorageEventHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä"
    document.querySelectorAll('.dev-storage-view-btn').forEach(button => {
      button.addEventListener('click', (e) => {
        const key = e.target.getAttribute('data-key');
        const value = localStorage.getItem(key);
        
        this.showStorageItemDetails(key, value);
      });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
    document.querySelectorAll('.dev-storage-edit-btn').forEach(button => {
      button.addEventListener('click', (e) => {
        const key = e.target.getAttribute('data-key');
        const isJSON = e.target.getAttribute('data-is-json') === 'true';
        const value = localStorage.getItem(key);
        
        this.editStorageItem(key, value, isJSON);
      });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å"
    document.querySelectorAll('.dev-storage-delete-btn').forEach(button => {
      button.addEventListener('click', (e) => {
        const key = e.target.getAttribute('data-key');
        
        if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç "${key}" –∏–∑ LocalStorage?`)) {
          localStorage.removeItem(key);
          this.logMessage(`–≠–ª–µ–º–µ–Ω—Ç "${key}" —É–¥–∞–ª–µ–Ω –∏–∑ LocalStorage`, 'success');
          this.showLocalStorageManager(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        }
      });
    });
  }
  
  /**
   * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ LocalStorage
   */
  showStorageItemDetails(key, value) {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    const viewContainer = document.createElement('div');
    viewContainer.className = 'dev-storage-view-container';
    viewContainer.style.padding = '10px';
    viewContainer.style.backgroundColor = 'rgba(0, 0, 0, 0.3)';
    viewContainer.style.borderRadius = '4px';
    viewContainer.style.marginTop = '10px';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const header = document.createElement('div');
    header.style.display = 'flex';
    header.style.justifyContent = 'space-between';
    header.style.alignItems = 'center';
    header.style.marginBottom = '10px';
    
    header.innerHTML = `
      <h3 style="margin: 0; color: #56b6c2;">–ü—Ä–æ—Å–º–æ—Ç—Ä —ç–ª–µ–º–µ–Ω—Ç–∞: ${key}</h3>
      <button id="close-storage-view" style="background: none; border: none; color: #aaa; cursor: pointer;">
        <i class="fas fa-times"></i>
      </button>
    `;
    
    viewContainer.appendChild(header);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ JSON
    let formattedValue = value;
    try {
      const parsedValue = JSON.parse(value);
      formattedValue = this.formatJson(parsedValue);
    } catch (e) {
      formattedValue = `<pre style="margin: 0; white-space: pre-wrap; word-wrap: break-word;">${this.escapeHtml(value)}</pre>`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    const content = document.createElement('div');
    content.style.maxHeight = '400px';
    content.style.overflow = 'auto';
    content.style.backgroundColor = 'rgba(0, 0, 0, 0.2)';
    content.style.padding = '10px';
    content.style.borderRadius = '3px';
    content.innerHTML = formattedValue;
    
    viewContainer.appendChild(content);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    const actions = document.createElement('div');
    actions.style.marginTop = '10px';
    actions.style.display = 'flex';
    actions.style.gap = '10px';
    
    const copyButton = document.createElement('button');
    copyButton.innerText = '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å';
    copyButton.style.backgroundColor = '#61afef';
    copyButton.style.color = 'white';
    copyButton.style.border = 'none';
    copyButton.style.padding = '5px 10px';
    copyButton.style.borderRadius = '3px';
    copyButton.style.cursor = 'pointer';
    
    copyButton.addEventListener('click', () => {
      navigator.clipboard.writeText(value).then(() => {
        this.logMessage(`–ó–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–∞ "${key}" —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞`, 'success');
      }).catch(err => {
        this.logMessage(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏: ${err}`, 'error');
      });
    });
    
    actions.appendChild(copyButton);
    viewContainer.appendChild(actions);
    
    // –°–æ–∑–¥–∞–µ–º –ª–æ–≥-–∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    const logEntry = document.createElement('div');
    logEntry.className = 'dev-log-entry';
    logEntry.style.padding = '10px';
    
    const timestamp = new Date().toLocaleTimeString();
    
    logEntry.innerHTML = `
      <div class="dev-log-entry-header">
        <span class="dev-log-message info">–ü—Ä–æ—Å–º–æ—Ç—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ LocalStorage</span>
        <span class="dev-log-timestamp">${timestamp}</span>
      </div>
      <div style="margin-top: 10px;" id="storage-view-container">
        ${viewContainer.outerHTML}
      </div>
    `;
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ª–æ–≥–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä
    const logsContainer = document.getElementById('dev-panel-logs');
    if (logsContainer) {
      logsContainer.prepend(logEntry);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
      document.getElementById('close-storage-view').addEventListener('click', () => {
        logEntry.remove();
      });
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –¥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
      logEntry.scrollIntoView({ behavior: 'smooth' });
    }
  }
  
  /**
   * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ LocalStorage
   */
  editStorageItem(key, value, isJSON) {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const editContainer = document.createElement('div');
    editContainer.className = 'dev-storage-edit-container';
    editContainer.style.padding = '10px';
    editContainer.style.backgroundColor = 'rgba(0, 0, 0, 0.3)';
    editContainer.style.borderRadius = '4px';
    editContainer.style.marginTop = '10px';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const header = document.createElement('div');
    header.style.display = 'flex';
    header.style.justifyContent = 'space-between';
    header.style.alignItems = 'center';
    header.style.marginBottom = '10px';
    
    header.innerHTML = `
      <h3 style="margin: 0; color: #98c379;">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞: ${key}</h3>
      <button id="close-storage-edit" style="background: none; border: none; color: #aaa; cursor: pointer;">
        <i class="fas fa-times"></i>
      </button>
    `;
    
    editContainer.appendChild(header);
    
    // –ï—Å–ª–∏ —ç—Ç–æ JSON, –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∫—Ä–∞—Å–∏–≤–æ
    let formattedValue = value;
    if (isJSON) {
      try {
        const parsedValue = JSON.parse(value);
        formattedValue = JSON.stringify(parsedValue, null, 2);
      } catch (e) {
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const textarea = document.createElement('textarea');
    textarea.id = 'storage-edit-textarea';
    textarea.style.width = '100%';
    textarea.style.height = '300px';
    textarea.style.backgroundColor = 'rgba(30, 33, 39, 0.9)';
    textarea.style.color = '#eee';
    textarea.style.border = '1px solid #444';
    textarea.style.borderRadius = '3px';
    textarea.style.padding = '10px';
    textarea.style.fontFamily = 'Consolas, Monaco, monospace';
    textarea.style.fontSize = '12px';
    textarea.value = formattedValue;
    
    editContainer.appendChild(textarea);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    const actions = document.createElement('div');
    actions.style.marginTop = '10px';
    actions.style.display = 'flex';
    actions.style.gap = '10px';
    
    const saveButton = document.createElement('button');
    saveButton.innerText = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
    saveButton.style.backgroundColor = '#98c379';
    saveButton.style.color = 'white';
    saveButton.style.border = 'none';
    saveButton.style.padding = '5px 10px';
    saveButton.style.borderRadius = '3px';
    saveButton.style.cursor = 'pointer';
    
    const formatButton = document.createElement('button');
    formatButton.innerText = '–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å JSON';
    formatButton.style.backgroundColor = '#61afef';
    formatButton.style.color = 'white';
    formatButton.style.border = 'none';
    formatButton.style.padding = '5px 10px';
    formatButton.style.borderRadius = '3px';
    formatButton.style.cursor = 'pointer';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    formatButton.addEventListener('click', () => {
      try {
        const parsedValue = JSON.parse(textarea.value);
        textarea.value = JSON.stringify(parsedValue, null, 2);
        this.logMessage('JSON —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω', 'success');
      } catch (e) {
        this.logMessage(`–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${e.message}`, 'error');
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    saveButton.addEventListener('click', () => {
      try {
        // –ï—Å–ª–∏ —ç—Ç–æ JSON, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        if (isJSON) {
          JSON.parse(textarea.value);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        localStorage.setItem(key, textarea.value);
        this.logMessage(`–≠–ª–µ–º–µ–Ω—Ç "${key}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`, 'success');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        document.getElementById('storage-edit-entry')?.remove();
        this.showLocalStorageManager();
      } catch (e) {
        this.logMessage(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${e.message}`, 'error');
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
    if (isJSON) {
      actions.appendChild(formatButton);
    }
    actions.appendChild(saveButton);
    
    editContainer.appendChild(actions);
    
    // –°–æ–∑–¥–∞–µ–º –ª–æ–≥-–∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const logEntry = document.createElement('div');
    logEntry.id = 'storage-edit-entry';
    logEntry.className = 'dev-log-entry';
    logEntry.style.padding = '10px';
    
    const timestamp = new Date().toLocaleTimeString();
    
    logEntry.innerHTML = `
      <div class="dev-log-entry-header">
        <span class="dev-log-message info">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ LocalStorage</span>
        <span class="dev-log-timestamp">${timestamp}</span>
      </div>
      <div style="margin-top: 10px;" id="storage-edit-container">
        ${editContainer.outerHTML}
      </div>
    `;
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ª–æ–≥–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä
    const logsContainer = document.getElementById('dev-panel-logs');
    if (logsContainer) {
      logsContainer.prepend(logEntry);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
      document.getElementById('close-storage-edit').addEventListener('click', () => {
        logEntry.remove();
      });
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –¥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
      logEntry.scrollIntoView({ behavior: 'smooth' });
    }
  }
  
  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ localStorage –≤ –∫–∏–ª–æ–±–∞–π—Ç–∞—Ö
   */
  calculateLocalStorageSize() {
    let total = 0;
    
    Object.keys(localStorage).forEach(key => {
      const value = localStorage.getItem(key);
      total += (key.length + value.length) * 2; // UTF-16 = 2 –±–∞–π—Ç–∞ –Ω–∞ —Å–∏–º–≤–æ–ª
    });
    
    return (total / 1024).toFixed(2); // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–∏–ª–æ–±–∞–π—Ç—ã
  }
  
  /**
   * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML —Å–∏–º–≤–æ–ª—ã
   */
  escapeHtml(text) {
    return text
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#039;");
  }
  
  /**
   * –ê–Ω–∞–ª–∏–∑ –∏ –≤—ã–≤–æ–¥ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–∞—Ö, —É—Ä–æ–∫–∞—Ö –∏ –≤–µ–±—Ö—É–∫–∞—Ö
   */
  analyzeAndDisplayCourses() {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–æ–≤ –∏–∑ –∫—É—Ä—Å-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
    if (!window.courseManager || !window.courseManager.courses) {
      this.logMessage('–î–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã', 'error');
      return;
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    this.showDebugInfo();
    
    const courses = window.courseManager.courses;
    const courseIds = Object.keys(courses);
    
    this.logMessage(`–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö: –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${courseIds.length} –∫—É—Ä—Å–æ–≤`, 'info');
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    const detailedReport = document.createElement('div');
    detailedReport.className = 'dev-detailed-report';
    
    let totalLessons = 0;
    let totalWebhooks = 0;
    let webhookUrls = [];
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫—É—Ä—Å
    courseIds.forEach(courseId => {
      const course = courses[courseId];
      
      // –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ü–∏—é –¥–ª—è –∫—É—Ä—Å–∞
      const courseSection = document.createElement('div');
      courseSection.className = 'dev-course-section';
      
      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ
      let courseInfo = `<h3 style="color: #56b6c2; margin: 10px 0;">–ö—É—Ä—Å: ${course.title || courseId}</h3>`;
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –µ–≥–æ
      if (course.redirectUrl) {
        courseInfo += `<div><span style="color: #d19a66;">–†–µ–¥–∏—Ä–µ–∫—Ç URL:</span> ${course.redirectUrl}</div>`;
      }
      
      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–Ω—è—Ö
      let daysList = '';
      let lessonCount = 0;
      let courseWebhooks = 0;
      
      if (course.days && Array.isArray(course.days)) {
        course.days.forEach((day, dayIndex) => {
          daysList += `<div style="margin-top: 8px;"><span style="color: #e5c07b;">–î–µ–Ω—å ${day.id}:</span> ${day.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</div>`;
          
          // –ê–Ω–∞–ª–∏–∑ —É—Ä–æ–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
          if (day.lessons && Array.isArray(day.lessons)) {
            daysList += `<ul style="margin-top: 2px; padding-left: 20px;">`;
            
            day.lessons.forEach((lesson, lessonIndex) => {
              lessonCount++;
              totalLessons++;
              
              // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É—Ä–æ–∫–µ
              let lessonInfo = `<li><span style="color: #98c379;">–£—Ä–æ–∫ ${lesson.id}:</span> ${lesson.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`;
              
              // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
              if (lesson.contentSource) {
                if (lesson.contentSource.type === 'webhook') {
                  lessonInfo += ` <span style="color: #61afef;">[–≤–µ–±—Ö—É–∫]</span>`;
                  courseWebhooks++;
                  totalWebhooks++;
                  webhookUrls.push(lesson.contentSource.url);
                } else if (lesson.contentSource.type === 'local') {
                  lessonInfo += ` <span style="color: #c678dd;">[–ª–æ–∫–∞–ª—å–Ω—ã–π]</span>`;
                } else if (lesson.contentSource.type === 'markdown') {
                  lessonInfo += ` <span style="color: #56b6c2;">[–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π]</span>`;
                }
              } else {
                lessonInfo += ` <span style="color: #e06c75;">[–Ω–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞]</span>`;
              }
              
              // –ï—Å—Ç—å –ª–∏ —Ç–µ—Å—Ç
              if (lesson.testSource) {
                lessonInfo += ` <span style="color: #98c379;">[—Ç–µ—Å—Ç]</span>`;
              }
              
              // –ï—Å—Ç—å –ª–∏ –∞—É–¥–∏–æ
              if (lesson.audioSource) {
                lessonInfo += ` <span style="color: #d19a66;">[–∞—É–¥–∏–æ]</span>`;
              }
              
              lessonInfo += `</li>`;
              daysList += lessonInfo;
            });
            
            daysList += `</ul>`;
          } else {
            daysList += `<div style="color: #e06c75; padding-left: 15px;">–£—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>`;
          }
        });
      } else {
        daysList = `<div style="color: #e06c75;">–î–Ω–∏ –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>`;
      }
      
      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —É—Ä–æ–∫–∞—Ö
      let specialLessonsList = '';
      
      if (course.specialLessons && Array.isArray(course.specialLessons)) {
        specialLessonsList += `<div style="margin-top: 10px;"><span style="color: #c678dd;">–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Ä–æ–∫–∏:</span></div>`;
        specialLessonsList += `<ul style="margin-top: 2px; padding-left: 20px;">`;
        
        course.specialLessons.forEach((lesson, lessonIndex) => {
          lessonCount++;
          totalLessons++;
          
          // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É—Ä–æ–∫–µ
          let lessonInfo = `<li><span style="color: #98c379;">–£—Ä–æ–∫ ${lesson.id}:</span> ${lesson.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`;
          
          // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
          if (lesson.contentSource) {
            if (lesson.contentSource.type === 'webhook') {
              lessonInfo += ` <span style="color: #61afef;">[–≤–µ–±—Ö—É–∫]</span>`;
              courseWebhooks++;
              totalWebhooks++;
              webhookUrls.push(lesson.contentSource.url);
            } else if (lesson.contentSource.type === 'local') {
              lessonInfo += ` <span style="color: #c678dd;">[–ª–æ–∫–∞–ª—å–Ω—ã–π]</span>`;
            } else if (lesson.contentSource.type === 'markdown') {
              lessonInfo += ` <span style="color: #56b6c2;">[–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π]</span>`;
            }
          } else {
            lessonInfo += ` <span style="color: #e06c75;">[–Ω–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞]</span>`;
          }
          
          // –ï—Å—Ç—å –ª–∏ —Ç–µ—Å—Ç
          if (lesson.testSource) {
            lessonInfo += ` <span style="color: #98c379;">[—Ç–µ—Å—Ç]</span>`;
          }
          
          // –ï—Å—Ç—å –ª–∏ –∞—É–¥–∏–æ
          if (lesson.audioSource) {
            lessonInfo += ` <span style="color: #d19a66;">[–∞—É–¥–∏–æ]</span>`;
          }
          
          lessonInfo += `</li>`;
          specialLessonsList += lessonInfo;
        });
        
        specialLessonsList += `</ul>`;
      }
      
      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É—Ä–æ–∫–∞—Ö –±–µ–∑ –¥–Ω–µ–π
      let noDayLessonsList = '';
      
      if (course.noDayLessons && Array.isArray(course.noDayLessons)) {
        noDayLessonsList += `<div style="margin-top: 10px;"><span style="color: #c678dd;">–£—Ä–æ–∫–∏ –±–µ–∑ –¥–Ω–µ–π:</span></div>`;
        noDayLessonsList += `<ul style="margin-top: 2px; padding-left: 20px;">`;
        
        course.noDayLessons.forEach((lesson, lessonIndex) => {
          lessonCount++;
          totalLessons++;
          
          // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É—Ä–æ–∫–µ
          let lessonInfo = `<li><span style="color: #98c379;">–£—Ä–æ–∫ ${lesson.id}:</span> ${lesson.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`;
          
          // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
          if (lesson.contentSource) {
            if (lesson.contentSource.type === 'webhook') {
              lessonInfo += ` <span style="color: #61afef;">[–≤–µ–±—Ö—É–∫]</span>`;
              courseWebhooks++;
              totalWebhooks++;
              webhookUrls.push(lesson.contentSource.url);
            } else if (lesson.contentSource.type === 'local') {
              lessonInfo += ` <span style="color: #c678dd;">[–ª–æ–∫–∞–ª—å–Ω—ã–π]</span>`;
            } else if (lesson.contentSource.type === 'markdown') {
              lessonInfo += ` <span style="color: #56b6c2;">[–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π]</span>`;
            }
          } else {
            lessonInfo += ` <span style="color: #e06c75;">[–Ω–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞]</span>`;
          }
          
          // –ï—Å—Ç—å –ª–∏ —Ç–µ—Å—Ç
          if (lesson.testSource) {
            lessonInfo += ` <span style="color: #98c379;">[—Ç–µ—Å—Ç]</span>`;
          }
          
          // –ï—Å—Ç—å –ª–∏ –∞—É–¥–∏–æ
          if (lesson.audioSource) {
            lessonInfo += ` <span style="color: #d19a66;">[–∞—É–¥–∏–æ]</span>`;
          }
          
          lessonInfo += `</li>`;
          noDayLessonsList += lessonInfo;
        });
        
        noDayLessonsList += `</ul>`;
      }
      
      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫—É—Ä—Å—É
      courseInfo += `<div><span style="color: #d19a66;">–í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤:</span> ${lessonCount}</div>`;
      courseInfo += `<div><span style="color: #d19a66;">–£—Ä–æ–∫–æ–≤ —Å –≤–µ–±—Ö—É–∫–∞–º–∏:</span> ${courseWebhooks}</div>`;
      courseInfo += daysList;
      courseInfo += specialLessonsList;
      courseInfo += noDayLessonsList;
      
      courseSection.innerHTML = courseInfo;
      detailedReport.appendChild(courseSection);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∫—É—Ä—Å–∞–º–∏
      if (courseIds.indexOf(courseId) < courseIds.length - 1) {
        const divider = document.createElement('div');
        divider.style.height = '1px';
        divider.style.backgroundColor = 'rgba(255, 255, 255, 0.1)';
        divider.style.margin = '15px 0';
        detailedReport.appendChild(divider);
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±—Ö—É–∫–æ–≤
    const testWebhooksButton = document.createElement('button');
    testWebhooksButton.innerText = '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ–±—Ö—É–∫–∏';
    testWebhooksButton.style.backgroundColor = '#007bff';
    testWebhooksButton.style.color = 'white';
    testWebhooksButton.style.border = 'none';
    testWebhooksButton.style.padding = '8px 15px';
    testWebhooksButton.style.borderRadius = '4px';
    testWebhooksButton.style.cursor = 'pointer';
    testWebhooksButton.style.margin = '10px 0';
    
    testWebhooksButton.onclick = async () => {
      if (!webhookUrls || webhookUrls.length === 0) {
        this.logMessage('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏', 'warning');
        return;
      }
      
      // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      const webhooksToTest = webhookUrls.slice(0, 3);
      this.logMessage(`–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É ${webhooksToTest.length} –≤–µ–±—Ö—É–∫–æ–≤...`, 'info');
      
      for (let i = 0; i < webhooksToTest.length; i++) {
        const url = webhooksToTest[i];
        this.logMessage(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±—Ö—É–∫–∞ ${i+1}/${webhooksToTest.length}: ${url}`, 'info');
        
        try {
          const controller = new AbortController();
          const timeoutId = setTimeout(() => controller.abort(), 10000);
          
          const response = await fetch(url, {
            method: 'GET',
            headers: {
              'Accept': 'text/plain, text/markdown, text/html, application/json, */*',
              'Cache-Control': 'no-cache'
            },
            mode: 'cors',
            cache: 'no-store',
            signal: controller.signal
          });
          
          clearTimeout(timeoutId);
          
          if (response.ok) {
            const contentType = response.headers.get('content-type') || '';
            const text = await response.text();
            
            this.logMessage(`–í–µ–±—Ö—É–∫ ${i+1} –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ! –°—Ç–∞—Ç—É—Å: ${response.status}, Content-Type: ${contentType}, –†–∞–∑–º–µ—Ä: ${text.length} –±–∞–π—Ç`, 'success');
          } else {
            this.logMessage(`–í–µ–±—Ö—É–∫ ${i+1} –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: HTTP ${response.status}`, 'error');
          }
        } catch (error) {
          this.logMessage(`–í–µ–±—Ö—É–∫ ${i+1} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`, 'error');
        }
      }
    };
    
    // –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const summaryInfo = document.createElement('div');
    summaryInfo.className = 'dev-summary-info';
    summaryInfo.style.backgroundColor = 'rgba(0, 0, 0, 0.2)';
    summaryInfo.style.padding = '10px';
    summaryInfo.style.borderRadius = '4px';
    summaryInfo.style.marginBottom = '15px';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±—Ö—É–∫–æ–≤
    summaryInfo.appendChild(testWebhooksButton);
    
    summaryInfo.innerHTML = `
      <div style="font-weight: bold; color: #56b6c2; margin-bottom: 5px;">–°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</div>
      <div><span style="color: #d19a66;">–í—Å–µ–≥–æ –∫—É—Ä—Å–æ–≤:</span> ${courseIds.length}</div>
      <div><span style="color: #d19a66;">–í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤:</span> ${totalLessons}</div>
      <div><span style="color: #d19a66;">–£—Ä–æ–∫–æ–≤ —Å –≤–µ–±—Ö—É–∫–∞–º–∏:</span> ${totalWebhooks}</div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–µ–±—Ö—É–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (webhookUrls.length > 0) {
      let webhookList = `<div style="margin-top: 5px;"><span style="color: #d19a66;">–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ URL –≤–µ–±—Ö—É–∫–æ–≤:</span></div><ul style="margin-top: 2px; padding-left: 20px;">`;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ URL
      const uniqueWebhooks = [...new Set(webhookUrls)];
      
      uniqueWebhooks.forEach(url => {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∂–¥—ã–π URL
        const count = webhookUrls.filter(u => u === url).length;
        webhookList += `<li style="color: #61afef; word-break: break-all;">${url} <span style="color: #98c379;">(–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ${count} —Ä–∞–∑)</span></li>`;
      });
      
      webhookList += `</ul>`;
      summaryInfo.innerHTML += webhookList;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const webhookSettingsStr = localStorage.getItem('webhookSettings');
    if (webhookSettingsStr) {
      try {
        const webhookSettings = JSON.parse(webhookSettingsStr);
        let settingsInfo = `<div style="margin-top: 10px;"><span style="color: #d19a66;">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤:</span></div><ul style="margin-top: 2px; padding-left: 20px;">`;
        
        if (webhookSettings.importUrl) {
          settingsInfo += `<li><span style="color: #98c379;">URL –∏–º–ø–æ—Ä—Ç–∞:</span> <span style="color: #61afef; word-break: break-all;">${webhookSettings.importUrl}</span></li>`;
        }
        
        if (webhookSettings.exportUrl) {
          settingsInfo += `<li><span style="color: #98c379;">URL —ç–∫—Å–ø–æ—Ä—Ç–∞:</span> <span style="color: #61afef; word-break: break-all;">${webhookSettings.exportUrl}</span></li>`;
        }
        
        if (webhookSettings.contentWebhookUrl) {
          settingsInfo += `<li><span style="color: #98c379;">URL –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</span> <span style="color: #61afef; word-break: break-all;">${webhookSettings.contentWebhookUrl}</span></li>`;
        }
        
        if (webhookSettings.testWebhookUrl) {
          settingsInfo += `<li><span style="color: #98c379;">URL —Ç–µ—Å—Ç–æ–≤:</span> <span style="color: #61afef; word-break: break-all;">${webhookSettings.testWebhookUrl}</span></li>`;
        }
        
        settingsInfo += `</ul>`;
        summaryInfo.innerHTML += settingsInfo;
      } catch (e) {
        this.logMessage(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–µ–±—Ö—É–∫–æ–≤: ${e.message}`, 'error');
      }
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –±—ç–∫–∞–ø–µ
    const backupTimestamp = localStorage.getItem('coursesBackupTimestamp');
    if (backupTimestamp) {
      const date = new Date(backupTimestamp);
      const formattedDate = date.toLocaleString();
      summaryInfo.innerHTML += `<div style="margin-top: 5px;"><span style="color: #d19a66;">–ü–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø:</span> ${formattedDate}</div>`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ—Ç—á–µ—Ç–æ–º
    detailedReport.insertBefore(summaryInfo, detailedReport.firstChild);
    
    // –°–æ–∑–¥–∞–µ–º –ª–æ–≥-–∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    const logEntry = document.createElement('div');
    logEntry.className = 'dev-log-entry';
    logEntry.style.padding = '10px';
    
    const timestamp = new Date().toLocaleTimeString();
    
    logEntry.innerHTML = `
      <div class="dev-log-entry-header">
        <span class="dev-log-message info">–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –∏ –≤–µ–±—Ö—É–∫–æ–≤</span>
        <span class="dev-log-timestamp">${timestamp}</span>
      </div>
      <div style="margin-top: 10px;">
        ${detailedReport.outerHTML}
      </div>
    `;
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ª–æ–≥–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à –æ—Ç—á–µ—Ç
    const logsContainer = document.getElementById('dev-panel-logs');
    if (logsContainer) {
      logsContainer.prepend(logEntry);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –¥–æ –æ—Ç—á–µ—Ç–∞
      logEntry.scrollIntoView({ behavior: 'smooth' });
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å, —á—Ç–æ –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω
    console.log(`üîß [DevMode] –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ —Å–æ–∑–¥–∞–Ω (${totalLessons} —É—Ä–æ–∫–æ–≤, ${totalWebhooks} –≤–µ–±—Ö—É–∫–æ–≤)`);
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const devMode = new DevMode();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', () => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Font Awesome
  if (!document.querySelector('link[href*="font-awesome"]')) {
    const fontAwesome = document.createElement('link');
    fontAwesome.rel = 'stylesheet';
    fontAwesome.href = 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css';
    document.head.appendChild(fontAwesome);
  }
  
  devMode.initialize();
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.devMode = devMode;
export default devMode;
