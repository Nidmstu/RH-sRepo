Ты знаешь весь проект на Replit. В нём есть следующие файлы:
1. index.html – базовая HTML-разметка с метатегами, CDN-подключениями (marked.js, Font Awesome), inline-стилями и разметкой контейнеров (#app-content, #home, #guide, #day-selection, #task-selection, #global-loading-overlay и пр.).
2. css/style.css – полный набор стилей (переменные, базовые, адаптивные стили, стили для загрузчиков, карточек, collapsible blocks и т.д.).
3. js/courseManager.js – модуль с классом CourseManager для загрузки, синхронизации и резервного копирования данных курсов, получения списка профессий, дней и уроков.
4. js/devMode.js – модуль режима разработчика, перехватывающий fetch/XHR и создающий панель логов (глобальный объект devMode).
5. js/admin.js – административный модуль (adminPanel) с горячими клавишами и UI-контролами.
6. js/app.js – основной модуль приложения: инициализация (initApp), переключение между разделами (home, day-selection, task-selection, guide), загрузка контента уроков (с обработкой Markdown через createCollapsibleBlocks) и обработка событий.
7. js/fetchTests.js – скрипт для получения тестовых данных с вебхуков и сохранения их в JSON.

Задача:
Отредактируй существующий HTML-файл, объединив в нём весь функционал проекта, чтобы итоговый файл был самодостаточным и работал так же, как исходное многомодульное приложение.

Требования:
A. Объединение стилей:
   - Скопируй inline-стили из index.html и CSS из css/style.css.
   - Объедини их в один блок `<style>` в разделе `<head>`.

B. Объединение скриптов:
   - Встроить весь JS-код из файлов js/courseManager.js, js/devMode.js, js/admin.js, js/app.js и js/fetchTests.js в один или несколько `<script>` блоков перед `</body>`.
   - Удали import/export, чтобы все переменные (courseManager, devMode, adminPanel, app, fetchTests) стали глобальными.
   - Соблюсти порядок: courseManager.js → devMode.js → admin.js → app.js → fetchTests.js.

C. Функциональность:
   - Итоговый файл должен обеспечивать загрузку курсов (с резервным копированием), работу режима разработчика, админ-панель, переключение между разделами (home, day-selection, task-selection, guide) и получение тестовых данных.
   - Все глобальные функции (selectDay, selectLesson, goBackToTaskSelection, openVocabulary, openAdminPanel и пр.) должны работать корректно.

D. Общие требования:
   - Итоговый HTML-файл – самодостаточный (без ссылок на локальные JS/CSS, только CDN для внешних библиотек).
   - Сохранить все комментарии, форматирование и исходный код без изменений.

Отредактируй текущий HTML-файл, интегрировав недостающие фрагменты кода и функциональность, чтобы итоговый файл полностью воспроизводил работу исходного проекта.